<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>星空凛的博客</title>
  
  <subtitle>我凛最可爱</subtitle>
  <link href="http://miaoguoge.xyz/atom.xml" rel="self"/>
  
  <link href="http://miaoguoge.xyz/"/>
  <updated>2022-09-24T04:05:16.580Z</updated>
  <id>http://miaoguoge.xyz/</id>
  
  <author>
    <name>ほしぞら　りん</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Qt拖拽、添加删除动画的实现</title>
    <link href="http://miaoguoge.xyz/qt-anima/"/>
    <id>http://miaoguoge.xyz/qt-anima/</id>
    <published>2022-09-12T08:04:53.000Z</published>
    <updated>2022-09-24T04:05:16.580Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Qt拖拽、添加删除动画的实现"><a href="#Qt拖拽、添加删除动画的实现" class="headerlink" title="Qt拖拽、添加删除动画的实现"></a>Qt拖拽、添加删除动画的实现</h1><blockquote><p>说明：效果和部分代码参考了必剪</p><p>为保护公司知识产权，仅给出头文件伪代码</p></blockquote><h2 id="1-先看效果"><a href="#1-先看效果" class="headerlink" title="1. 先看效果"></a>1. 先看效果</h2><p><img src="https://i0.hdslb.com/bfs/album/1783e50ac26cf4560c7b08a31d3f26fafaede4ff.gif"></p><span id="more"></span><p><img src="https://i0.hdslb.com/bfs/album/e0f7e65759049917521d02717c2cdbc79c97f605.gif"></p><h2 id="2-类图"><a href="#2-类图" class="headerlink" title="2. 类图"></a>2. 类图</h2><p><img src="https://i0.hdslb.com/bfs/album/dd4675bf3577bf1f283ca0e0698333000ca4e5b0.png"></p><h2 id="3-底层动画组件-AnimeListWidget"><a href="#3-底层动画组件-AnimeListWidget" class="headerlink" title="3. 底层动画组件 AnimeListWidget"></a>3. 底层动画组件 AnimeListWidget</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnimeListWidget</span> :</span> <span class="keyword">public</span> QFrame &#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">AnimeListWidget</span><span class="params">(QMargins margins, <span class="keyword">bool</span> delay_resize, QWidget* parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setWidgetPosition</span><span class="params">(<span class="keyword">const</span> std::vector&lt;std::pair&lt;QWidget*, QPoint&gt;&gt;&amp; widget_and_position)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 修改输入控件的父控件</span></span><br><span class="line">        <span class="comment">// 复制QWidget[]</span></span><br><span class="line">        <span class="comment">// 计算自身大小</span></span><br><span class="line">        <span class="built_in">startAnimation</span>();</span><br><span class="line">        <span class="comment">// 更新自身控件列表widgets_</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::vector&lt;QWidget*&gt; widgets_;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">startAnimation</span><span class="params">(<span class="keyword">const</span> std::vector&lt;std::pair&lt;QWidget*, QPoint&gt;&gt;&amp; widget_and_position, <span class="keyword">const</span> QSize&amp; new_size)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建QParallelAnimationGroup</span></span><br><span class="line">        <span class="comment">// 设置自身大小</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; x : widget_and_position) &#123;</span><br><span class="line">            <span class="comment">// 已在列表中的控件执行移动</span></span><br><span class="line">            <span class="keyword">auto</span> animation = <span class="keyword">new</span> <span class="built_in">QPropertyAnimation</span>(x.first, <span class="string">&quot;pos&quot;</span>, animation_group);</span><br><span class="line">            <span class="comment">// 未在列表中的控件执行淡入</span></span><br><span class="line">            <span class="keyword">auto</span> animation = <span class="keyword">new</span> <span class="built_in">QPropertyAnimation</span>(x.first-&gt;<span class="built_in">graphicsEffect</span>(), <span class="string">&quot;opacity&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        animation_group-&gt;<span class="built_in">start</span>(QAbstractAnimation::DeleteWhenStopped);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="4-拖拽按钮DraggableButton"><a href="#4-拖拽按钮DraggableButton" class="headerlink" title="4. 拖拽按钮DraggableButton"></a>4. 拖拽按钮DraggableButton</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DraggableButton</span> :</span> <span class="keyword">public</span> QLabel &#123;</span><br><span class="line">Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">DraggableButton</span>(QWidget* parent, QWidget* drag_widget, <span class="keyword">bool</span> need_hand = <span class="literal">true</span>, QString mimedata = <span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="function">QPoint <span class="title">getPosOffset</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setMimeData</span><span class="params">(QString mimedata)</span></span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mouseMoveEvent</span><span class="params">(QMouseEvent* event)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        DragManager::<span class="built_in">Instance</span>().<span class="built_in">onMouseMoved</span>(drag_widget, event, <span class="keyword">this</span>, mimedata);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">QWidget* drag_widget = <span class="literal">nullptr</span>;</span><br><span class="line">QPoint pos_offset;</span><br><span class="line"><span class="keyword">bool</span> need_hand;</span><br><span class="line">QString mimedata;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5-可拖拽列表DraggableListWidget"><a href="#5-可拖拽列表DraggableListWidget" class="headerlink" title="5. 可拖拽列表DraggableListWidget"></a>5. 可拖拽列表DraggableListWidget</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DraggableListWidget</span> :</span> <span class="keyword">public</span> QScrollArea &#123;</span><br><span class="line">Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">DraggableListWidget</span>(QWidget* parent, QString mimetype, <span class="keyword">int</span> padding = <span class="number">19</span>, QMargins margins = <span class="built_in">QMargins</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), </span><br><span class="line">QListView::Flow direction = QListView::TopToBottom);</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addItem</span><span class="params">(QWidget* item)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertItem</span><span class="params">(<span class="keyword">int</span> index, QWidget* item)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeItem</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"><span class="function">QWidget* <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveItem</span><span class="params">(<span class="keyword">int</span> source, <span class="keyword">int</span> target)</span></span>;</span><br><span class="line"><span class="function">std::vector&lt;QWidget*&gt;&amp; <span class="title">getItems</span><span class="params">()</span></span>;</span><br><span class="line">   </span><br><span class="line">signals:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swapItem</span><span class="params">(<span class="keyword">int</span> source, <span class="keyword">int</span> target, <span class="keyword">int</span> parent_index)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dragEnterEvent</span><span class="params">(QDragEnterEvent * event)</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dragMoveEvent</span><span class="params">(QDragMoveEvent* event)</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dropEvent</span><span class="params">(QDropEvent* event)</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dragLeaveEvent</span><span class="params">(QDragLeaveEvent* event)</span> <span class="keyword">override</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">std::vector&lt;std::pair&lt;QWidget*, QPoint&gt;&gt; <span class="built_in">update_</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_dragging) &#123;  <span class="comment">// 拖动状态下刷新</span></span><br><span class="line">            <span class="comment">// 放置插入的占位控件</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 正常状态刷新</span></span><br><span class="line">        &#125;</span><br><span class="line">        list_widget-&gt;<span class="built_in">setWidgetPosition</span>(widget_and_position);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">asyncUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QTimer::<span class="built_in">singleShot</span>(<span class="number">0</span>, <span class="keyword">this</span>, [<span class="keyword">this</span>]() &#123;</span><br><span class="line">            <span class="built_in">update_</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::vector&lt;QWidget*&gt; items;</span><br><span class="line">AnimeListWidget* list_widget = <span class="literal">nullptr</span>;</span><br><span class="line">std::unique_ptr&lt;DropPlaceholder&gt; drop_placeholder;</span><br><span class="line">QString mimetype;</span><br><span class="line">    <span class="comment">// 根据鼠标位置，计算当前的插入位置，插入位置为排除掉拖动控件的位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calculateDropIndex</span><span class="params">(<span class="keyword">const</span> QPoint&amp; position)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 复制控件列表，但排除被隐藏的控件</span></span><br><span class="line">        <span class="comment">// 根据鼠标位置和中心高度/宽度计算插入位置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="6-拖拽管理器DragManager"><a href="#6-拖拽管理器DragManager" class="headerlink" title="6. 拖拽管理器DragManager"></a>6. 拖拽管理器DragManager</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DragManager</span> :</span> <span class="keyword">public</span> QObject &#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> DragManager&amp; <span class="title">Instance</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">QPointer&lt;QWidget&gt; <span class="title">getDraggingWidget</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="comment">// 处理鼠标事件</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onMouseMoved</span><span class="params">(QPointer&lt;QWidget&gt; widget, QMouseEvent* event, DraggableButton* btn, QString mimedata = <span class="string">&quot;&quot;</span>)</span> </span>&#123;</span><br><span class="line">        <span class="function">emit <span class="title">beginDrag</span><span class="params">(widget)</span></span>;</span><br><span class="line">        QDrag::<span class="built_in">exec</span>(Qt::MoveAction);</span><br><span class="line">        <span class="function">emit <span class="title">endDrag</span><span class="params">(widget)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">beginDrag</span><span class="params">(QWidget* dragging_widget)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">endDrag</span><span class="params">(QWidget* dragging_widget)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">DragManager</span><span class="params">(QObject* parent = <span class="literal">nullptr</span>)</span> </span>&#123;&#125;</span><br><span class="line">    QPointer&lt;QWidget&gt; dragging_widget;  <span class="comment">// 处于拖动状态的控件</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="7-占位符DropPlaceholder"><a href="#7-占位符DropPlaceholder" class="headerlink" title="7. 占位符DropPlaceholder"></a>7. 占位符DropPlaceholder</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DropPlaceholder</span> :</span> <span class="keyword">public</span> QFrame &#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">DropPlaceholder</span><span class="params">(QWidget* parent = <span class="literal">nullptr</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">const</span> QString kStyleSheet = <span class="built_in">QStringLiteral</span>(</span><br><span class="line">            <span class="string">&quot;#dropPlaceholder &#123;&quot;</span></span><br><span class="line">            <span class="string">&quot;   border-radius: 8px;&quot;</span></span><br><span class="line">            <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">            <span class="string">&quot;#mainWidget &#123;&quot;</span></span><br><span class="line">            <span class="string">&quot;   border: 2px dashed rgba(112,134,233,0.8);&quot;</span></span><br><span class="line">            <span class="string">&quot;   border-radius: 8px;&quot;</span></span><br><span class="line">            <span class="string">&quot;   background: rgba(112,134,233,0.16);&quot;</span></span><br><span class="line">            <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">resizeEvent</span><span class="params">(QResizeEvent* event)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QFrame* main_widget_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Qt拖拽、添加删除动画的实现&quot;&gt;&lt;a href=&quot;#Qt拖拽、添加删除动画的实现&quot; class=&quot;headerlink&quot; title=&quot;Qt拖拽、添加删除动画的实现&quot;&gt;&lt;/a&gt;Qt拖拽、添加删除动画的实现&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;说明：效果和部分代码参考了必剪&lt;/p&gt;
&lt;p&gt;为保护公司知识产权，仅给出头文件伪代码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-先看效果&quot;&gt;&lt;a href=&quot;#1-先看效果&quot; class=&quot;headerlink&quot; title=&quot;1. 先看效果&quot;&gt;&lt;/a&gt;1. 先看效果&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://i0.hdslb.com/bfs/album/1783e50ac26cf4560c7b08a31d3f26fafaede4ff.gif&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="桌面端开发" scheme="http://miaoguoge.xyz/categories/%E6%A1%8C%E9%9D%A2%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Qt" scheme="http://miaoguoge.xyz/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Merge与测试网</title>
    <link href="http://miaoguoge.xyz/ropsten-merge/"/>
    <id>http://miaoguoge.xyz/ropsten-merge/</id>
    <published>2022-05-30T07:18:35.000Z</published>
    <updated>2022-10-14T06:17:13.160Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Merge"><a href="#1-Merge" class="headerlink" title="1 Merge"></a>1 Merge</h1><h2 id="1-1-Merge-路线图"><a href="#1-1-Merge-路线图" class="headerlink" title="1.1 Merge 路线图"></a>1.1 Merge 路线图</h2><p><img src="https://s2.loli.net/2022/06/29/j1r8VcT6JYO3Cvl.png"></p><p>合并后，发行的 ETH 数量预计将下降 90%；</p><span id="more"></span><h2 id="1-2-难度炸弹对时间线的影响"><a href="#1-2-难度炸弹对时间线的影响" class="headerlink" title="1.2 难度炸弹对时间线的影响"></a>1.2 难度炸弹对时间线的影响</h2><p>（ACD 140 推迟之前）难度炸弹预计在 5 月左右开始在以太坊网络上出现，并在 6 月 &#x2F; 7 月开始显著增加区块时间，并在 8 月之前使区块速度变得难以忍受（读取速度 15 - 20 秒）。</p><p>如果客户端开发人员认为他们无法在阻塞时间过长之前将 Merge 部署到主网，则需要再次延迟。延迟炸弹可以采用两种方法：</p><ul><li><strong>同时进行炸弹延迟和 Merge：</strong>如果仅需要延迟炸弹几周，则可以将炸弹延迟与支持 The Merge 客户端发布结合起来。这些客户端会在特定的区块延迟炸弹、恢复 13 秒的区块时间，随后很快激活 The Merge。</li><li><strong>单独进行炸弹延迟：</strong>如果不希望在区块时间变得难以忍受之后才在以太坊主网上激活 The Merge，那么将需要在 The Merge 之前进行仅延迟难度炸弹的单独网络升级。此时延迟难度炸弹的时间与合并发生的时间无关。例如，如果将炸弹推迟 6 个月，可以在此之前合并。同样，如果将炸弹推迟 3 个月，并在它再次引爆之前发现了一个重大问题，则可以考虑再次延迟炸弹。</li></ul><h2 id="1-3-分片"><a href="#1-3-分片" class="headerlink" title="1.3 分片"></a>1.3 分片</h2><h3 id="1-执行分片"><a href="#1-执行分片" class="headerlink" title="1. 执行分片"></a>1. 执行分片</h3><p>在最初的分片路线图（理想状态）中，将有 64 个执行分片。</p><p>由于网络将是防欺诈的，这意味着信标链接需要受有关无效分片区块的欺诈性索赔，还要在必要时恢复链、罚没违规的验证者并奖励举报人。这将需要很长时间才能实施（因为整个网络必须恢复到欺诈之前的状态）。这也意味着网络将进入<code>回旋期</code>（在新的<code>最终检查点</code>最终确定之前的一段时间&lt;以epoch度量&gt;），而且还需做出具有边缘情况的同步假设。</p><p>但是，分片后执行将更容易实现，并且如果执行的有效性得到证明，则无需那些同步假设。即每个执行分片都在运行 zkEVM，但 <strong>zkEVM 仍在研发中</strong>，所以<strong>执行分片已被降低优先级（并没有取消）</strong>，数据分片变成了目前正在研究和实施的主要方法。</p><h3 id="2-数据分片"><a href="#2-数据分片" class="headerlink" title="2. 数据分片"></a>2. 数据分片</h3><p>执行分片后的计划是首先通过一种新的交易方式公开数据分片，这也将为在单独的 p2p 层上全面实施分片奠定基础；</p><p>但是数据分片需要相当长的时间来完成实施和部署，但 Rollup 现在就可用。而且 EIP - 4844 可以将 Rollup 费用降低几个数量级，并使以太坊在不牺牲去中心化的情况下保持竞争力。</p><h3 id="3-Rollup-与-EIP-4844"><a href="#3-Rollup-与-EIP-4844" class="headerlink" title="3. Rollup 与 EIP - 4844"></a>3. Rollup 与 EIP - 4844</h3><p>Rollup 在合并后仍然部署运行在执行层上，但可以利用共识层的最终确定性；</p><p>EIP - 4844（分片 BLOB 交易）：它向以太坊引入了一种新的交易类型，信标节点接受 blob 数据并保留一小段时间。这些更改是向前兼容的，不需要 EVM 执行，并且足够小以保持磁盘使用可管理。它运行在信标节点中，而不是在共识层。</p><p>6月18日，<a href="https://www.youtube.com/watch?v=flx1hDUV8O0">EIP-4844 Breakout room meeting</a>，演示了 EIP-4844 测试网现场工作：将 blob 上传到 EIP-4844 数据存储、下载并确认有效性；缺少的功能： 强大的同步；收费市场；Blob 删除。</p><h2 id="1-4-区块处理过程"><a href="#1-4-区块处理过程" class="headerlink" title="1.4 区块处理过程"></a>1.4 区块处理过程</h2><p>在高层次上，合并后的区块处理过程如下：</p><ol><li>选出一个验证者来提议一个区块；</li><li>该验证者通过 <a href="https://github.com/ethereum/execution-apis/tree/main/src/engine">Engine API</a> 要求执行层给它发送一个<code>ExecutionPayload</code>；</li><li>执行层给共识层返回一个包含有最大利润的一系列已验证交易的负载；</li><li>共识层提议一个包含此负载的区块并将其传播到信标链 p2p 网络上；<ul><li>个别交易仍在执行层 p2p 网络上传播，执行层仅负责维护交易池，完整的区块在共识层网络上传播。</li><li>验证者在执行层上指定他们想要接收费用的地址。交易费用永远不会像验证者权益和奖励那样被“锁定”在信标链上。</li></ul></li><li>其他验证者证明该区块，如果有效，则在信标链 p2p 网络上传播它；</li></ol><h2 id="1-5-Merge后可用的服务"><a href="#1-5-Merge后可用的服务" class="headerlink" title="1.5 Merge后可用的服务"></a>1.5 Merge后可用的服务</h2><p><img src="https://i0.hdslb.com/bfs/album/e1ad02600900dde7db0b12757421127398b7b243.jpg" alt="img"></p><h2 id="1-6-提款与安全性"><a href="#1-6-提款与安全性" class="headerlink" title="1.6 提款与安全性"></a>1.6 提款与安全性</h2><ul><li>合并后不会立即启用提款（验证者提取累积的以太币），但会在下一次升级（分叉）中启用；</li><li>根据权益证明，如果发生攻击，可以简单地升级网络以移除攻击者的代币；</li></ul><h2 id="1-7-一些技术细节"><a href="#1-7-一些技术细节" class="headerlink" title="1.7 一些技术细节"></a>1.7 一些技术细节</h2><ul><li><p>开发人员决定添加两个新标签，<code>finalized</code>和<code>safe</code>，以及<code>earliest</code>、<code>latest</code>和<code>pending</code>，以帮助准确地向用户和 Dapp 开发人员传达以太坊区块的状态。如果尝试在 Merge 之前查询标签，将收到错误消息；</p><p><img src="https://i0.hdslb.com/bfs/album/b35ab1bf3fd930764dfe9e4177d8b6254db727f0.jpg" alt="图像"></p></li><li><p>在 PoW 下，使用<code>区块确认</code>来确定区块不会被重组。在 PoS 下，可以得到一个明确的确认：<code>确定性阈值</code>。因此，JSON RPC 端点将添加一个<code>finalized</code>标志，它将返回最后一个<code>finalized</code>块；</p></li><li><p>蜂巢测试指共识测试、同步测试、网络测试；</p></li><li><p>合并后<code>BLOCKHASH</code>仍然可用，但伪随机性较弱；<code>DIFFICULTY</code> 更新并重命名为<code>PREVRANDAO</code>;</p></li></ul><h1 id="2-公共测试网"><a href="#2-公共测试网" class="headerlink" title="2 公共测试网"></a>2 公共测试网</h1><h2 id="2-1-Ropsten"><a href="#2-1-Ropsten" class="headerlink" title="2.1 Ropsten"></a>2.1 Ropsten</h2><h3 id="2-1-1-基本信息"><a href="#2-1-1-基本信息" class="headerlink" title="2.1.1 基本信息"></a>2.1.1 基本信息</h3><ul><li><p>信标链创世时间戳：1653922800（ 2022年 5 月 30 日 晚上 11:00:00 ）；</p></li><li><p>创世验证者数量：100012；</p></li><li><p>总终端难度：43,531,756,765,713,534（6月3日因矿工阻挠推迟：50,000,000,000,000,000 ）；</p><p><img src="https://s2.loli.net/2022/06/29/FH5r8WwfOclmyDz.png"></p></li><li><p>预计合并时间：6月8日-9日；</p></li></ul><h3 id="2-1-2-故障记录"><a href="#2-1-2-故障记录" class="headerlink" title="2.1.2 故障记录"></a>2.1.2 故障记录</h3><p>截至2022年6月5日下午5：00，验证者激活仍然存在故障。</p><ul><li>Erigon 存在间歇性问题，导致同步失败</li><li>Besu 存在（间歇性？）问题，导致同步失败</li><li>Nimbus不能与Geth同步，但可以与其他人同步。目前尚不清楚问题是否与Nimbus，Geth或两者有关</li><li>Nethermind 可能有内存泄漏</li></ul><h3 id="2-1-3-Merge-记录"><a href="#2-1-3-Merge-记录" class="headerlink" title="2.1.3 Merge 记录"></a>2.1.3 Merge 记录</h3><p>2022 年 6 月 10 日 0：00 左右（比预计时间晚 2h）到达 TTD，参与率下降了 13%，来源是 Nimbus、besu 客户端的节点配置问题以及 nethermind 的 bug，在修复完成以及重启后，参与率回升到了 99%，随后合并正确运行；</p><p>另一方面，一些客户端会构建出 0 交易区块，并且构建过程会超时；</p><h2 id="2-2-Sepolia"><a href="#2-2-Sepolia" class="headerlink" title="2.2 Sepolia"></a>2.2 Sepolia</h2><p>信标链创世纪6月20日；它将只有少量的验证者，并将主要由开发团队控制；</p><p>TTD可能为6月24日；目标是在6月29日</p><h1 id="3-升级路线图"><a href="#3-升级路线图" class="headerlink" title="3 升级路线图"></a>3 升级路线图</h1><h2 id="1-影子分叉"><a href="#1-影子分叉" class="headerlink" title="1. 影子分叉"></a>1. 影子分叉</h2><p>影子分叉是通过分叉具有少量节点的实时网络而创建的新测试网络。影子分叉保持相同的状态和历史记录，因此可以重放来自主网的交易。其细节如下：</p><p><img src="https://i0.hdslb.com/bfs/album/0bce1b075c25d859162c77498c6addc027ea334b.jpg" alt="img"></p><ul><li>Goerli 区块的第一行显示了规范链上的一个节点，该节点不知道影子分叉；</li><li>Goeli 区块的中间一行显示了影子分叉链上的一个节点，该节点有一个修改后的配置：一旦达到总终端难度（TTD）就分叉；</li><li>最下面一行显示了一个仅用于影子分叉的信标链：当到达 TTD 时，它将为链提供共识；</li><li>到达 TTD 后，规范链上的节点继续正常生成块，在它们看来没有发生任何事情；</li><li>到达 TTD 后，被修改配置的节点会分叉并运行 The Merge，第一个合并后的区块由信标链中的下一个验证者生成，虽然此块可以包含规范链上的任何交易，但实际包含的交易或顺序不一定与规范链上的相同。</li></ul><h3 id="主网影子分叉客户端问题"><a href="#主网影子分叉客户端问题" class="headerlink" title="主网影子分叉客户端问题"></a>主网影子分叉客户端问题</h3><h4 id="影子分叉7"><a href="#影子分叉7" class="headerlink" title="影子分叉7"></a>影子分叉7</h4><p> 6 月 22 日合并，将尝试复制在Ropsten中发现的所有问题 - 希望现在全部解决。还会做一些同步测试。</p><p><a href="https://ethstats.mainnetshadowfork7.ethdevops.io/">Ethereum Network Status (ethdevops.io)</a>，<a href="https://explorer.mainnetshadowfork7.ethdevops.io/">Testnet Ethereum Explorer (ethdevops.io)</a>，<a href="https://beaconchain.mainnetshadowfork7.ethdevops.io/">Mainnet shadow fork 7 Explorer - Index - beaconcha.in - 2022 (ethdevops.io)</a></p><h4 id="影子分叉-6"><a href="#影子分叉-6" class="headerlink" title="影子分叉 6"></a>影子分叉 6</h4><p>2022 年 6 月 4 日，主网影子分叉 6 合并成功，但存在一些客户端故障：除 Geth 外的其他执行层均存在部分问题（如不同步或提议无交易的区块）；</p><table><thead><tr><th align="left">执行层</th><th align="left">共识层</th><th align="left">Synced to head?</th><th align="left">Attesting?</th><th align="left">Proposing?</th><th align="left">Proposing non-empty slot?</th></tr></thead><tbody><tr><td align="left">Geth</td><td align="left">Lighthouse</td><td align="left">✅</td><td align="left">✅</td><td align="left">✅</td><td align="left">✅</td></tr><tr><td align="left"></td><td align="left">Teku</td><td align="left">✅</td><td align="left">✅</td><td align="left">✅</td><td align="left">✅</td></tr><tr><td align="left"></td><td align="left">Nimbus</td><td align="left">✅</td><td align="left">✅</td><td align="left">✅</td><td align="left">✅</td></tr><tr><td align="left"></td><td align="left">Lodestar</td><td align="left">✅</td><td align="left">✅</td><td align="left">✅</td><td align="left">✅</td></tr><tr><td align="left"></td><td align="left">Prysm</td><td align="left">✅</td><td align="left">✅</td><td align="left">✅</td><td align="left">✅</td></tr><tr><td align="left">Nethermind</td><td align="left">Lighthouse</td><td align="left">✅</td><td align="left">✅</td><td align="left">✅</td><td align="left">✅</td></tr><tr><td align="left"></td><td align="left">Teku</td><td align="left">✅</td><td align="left">✅</td><td align="left">✅</td><td align="left">✅</td></tr><tr><td align="left"></td><td align="left">Nimbus</td><td align="left">✅</td><td align="left">✅</td><td align="left">✅</td><td align="left">❌</td></tr><tr><td align="left"></td><td align="left">Lodestar</td><td align="left">✅</td><td align="left">✅</td><td align="left">✅</td><td align="left">✅ (some are still 0)</td></tr><tr><td align="left"></td><td align="left">Prysm</td><td align="left">✅</td><td align="left">✅</td><td align="left">✅</td><td align="left">✅</td></tr><tr><td align="left">Besu</td><td align="left">Lighthouse</td><td align="left">✅</td><td align="left">✅</td><td align="left">✅</td><td align="left">✅</td></tr><tr><td align="left"></td><td align="left">Teku</td><td align="left">✅</td><td align="left">✅</td><td align="left">✅</td><td align="left">❌</td></tr><tr><td align="left"></td><td align="left">Nimbus</td><td align="left">✅</td><td align="left">✅</td><td align="left">✅</td><td align="left">❌</td></tr><tr><td align="left"></td><td align="left">Lodestar</td><td align="left">✅</td><td align="left">✅</td><td align="left">✅</td><td align="left">❌</td></tr><tr><td align="left"></td><td align="left">Prysm</td><td align="left">✅</td><td align="left">✅</td><td align="left">✅</td><td align="left">❌</td></tr><tr><td align="left">Erigon</td><td align="left">Lighthouse</td><td align="left">❌</td><td align="left">❌</td><td align="left">❌</td><td align="left">❌</td></tr><tr><td align="left"></td><td align="left">Teku</td><td align="left">❌</td><td align="left">❌</td><td align="left">❌</td><td align="left">❌</td></tr><tr><td align="left"></td><td align="left">Nimbus</td><td align="left">✅</td><td align="left">✅</td><td align="left">✅</td><td align="left">❌</td></tr><tr><td align="left"></td><td align="left">Lodestar</td><td align="left">✅</td><td align="left">✅</td><td align="left">✅</td><td align="left">❌</td></tr><tr><td align="left"></td><td align="left">Prysm</td><td align="left">✅</td><td align="left">✅</td><td align="left">✅</td><td align="left">❌</td></tr></tbody></table><p>在影子分叉5中，执行层仅 Geth 正常运行；</p><p>在影子分叉4中，执行层 Geth、Nethermind 正常运行；</p><h2 id="2-测试网升级"><a href="#2-测试网升级" class="headerlink" title="2. 测试网升级"></a>2. 测试网升级</h2><ul><li>在 Ropsten 之后，还有 2 个测试网分叉需要在主网之前升级，下一个是 Sepolia 测试网，Sepolia 在合并后将被推荐为新的测试网；</li><li>为 Ropsten 分叉部署的代码不是将部署在主网上的代码，Merge 在主网上启动后 Ropsten 会被弃用，迁移到 Goerli &#x2F; Sepolia 上；</li><li>Sepolia BC 会保持简单和小巧，而现有的 Prater BC 测试网（最终将与 Goerli 测试网合并，随后可能会作为遗留测试网维护）将继续扩大规模，并更准确地反映主网上验证者的规模；</li><li>Rinkeby 可能不会进行 merge，并将弃用，因为它仅支持 Geth；</li></ul><h2 id="3-主网-Merge"><a href="#3-主网-Merge" class="headerlink" title="3. 主网 Merge"></a>3. 主网 Merge</h2><p>测试网全部升级完毕、没有致命错误后才会进行主网升级；另一方面，以太坊市值必须足够，否则一旦 Poof of Stake 上线，它就会受到攻击；</p><h3 id="主网信标链"><a href="#主网信标链" class="headerlink" title="主网信标链"></a>主网信标链</h3><p>主网信标链在 2022 年 5 月 25 日经历了 7 个区块的深度重组（多年来的第一次，还不清楚是由攻击还是网络延时引起），这说明链还不够稳定；</p><h3 id="难度炸弹推迟草案："><a href="#难度炸弹推迟草案：" class="headerlink" title="难度炸弹推迟草案："></a>难度炸弹推迟草案：</h3><p>EIP - 5133，推迟到 2022年 8 月中旬。<a href="https://github.com/ethereum/EIPs/pull/5133">Delaying Difficulty Bomb to Mid August 2022 by ericmartihaynes · Pull Request #5133 · ethereum&#x2F;EIPs (github.com)</a></p><h3 id="弱主观性"><a href="#弱主观性" class="headerlink" title="弱主观性"></a>弱主观性</h3><p><a href="https://www.symphonious.net/2022/05/17/weak-subjectivity-checkpoints-have-failed/">Weak Subjectivity Checkpoints Have Failed | Symphonious</a></p><h2 id="4-主网存储瓶颈"><a href="#4-主网存储瓶颈" class="headerlink" title="4. 主网存储瓶颈"></a>4. 主网存储瓶颈</h2><p><strong>主网执行层在未来几年将会遇到历史数据的存储瓶颈，有人提出了几个解决方案：</strong></p><ul><li>新建一个专门的历史层（区别于执行层、共识层），通过几百个用户&#x2F;节点来分散存储历史数据；（希望较大）</li><li>强制 Rollup 保管并证明自己的相关数据，但因为 danksharding 不仅仅用于 Rollup，而且有违去中心化，所以这不是好的解决方案；</li><li>同上，但 Rollup 不提供任何历史保证，继续通过节点进行扩展；</li><li>让其他协议来处理溢出，但这将大大降低安全性；</li></ul><p><strong>其中，通过调用数据扩展和分片扩展 Rollup 的分步路线图如下：</strong></p><ol><li>交易调用数据扩展（EIP - 4488）（每年约 250-1000 GB）；</li><li>4 个适当的分片；（每年约 2.5 TB）</li><li>64 个分片，受委员会保护；（每年约 40 TB）</li><li>数据可用性采样</li></ol><p><strong>谁会在分片下存储历史数据？</strong></p><p>增加数据空间的一个必要条件是删除以太坊核心协议负责永久维护达成共识的所有数据。</p><h1 id="Kiln"><a href="#Kiln" class="headerlink" title="Kiln"></a>Kiln</h1><p>信标链浏览器和存款处理方面存在问题；</p><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><h2 id="链上数据："><a href="#链上数据：" class="headerlink" title="链上数据："></a>链上数据：</h2><ul><li>Ropsten：<a href="https://dashboards.anyblock.tools/ethereum/ethereum/ropsten/network-metrics/?tx_chunk_size=day&currency=usd&chunk_size=hour">Dashboards | Anyblock Analytics</a></li><li>主网 Watch the Burn：<a href="https://watchtheburn.com/">Watch The Burn: EIP-1559 Real-Time ETH Burn Visualization for Ethereum</a></li><li>难度炸弹进展：<a href="https://ethresear.ch/t/blocks-per-week-as-an-indicator-of-the-difficulty-bomb/12120/13">Blocks per week as an indicator of the difficulty bomb - Data Science - Ethereum Research (ethresear.ch)</a></li></ul><h2 id="GitHub："><a href="#GitHub：" class="headerlink" title="GitHub："></a>GitHub：</h2><ul><li>Ropsten 主仓库：<a href="https://github.com/ethereum/ropsten">ethereum&#x2F;ropsten: Ropsten public testnet PoW chain</a></li><li><strong>Ropsten 信标链配置</strong>：<a href="https://github.com/eth-clients/merge-testnets/pull/9">Add ropsten-beacon-chain configs by parithosh · Pull Request #9 · eth-clients&#x2F;merge-testnets · GitHub</a></li><li>Testnet Configs：<a href="https://github.com/eth-clients/merge-testnets">eth-clients&#x2F;merge-testnets: A collection of configs for all the ethereum merge testnets (github.com)</a></li><li>以太坊路线图常见问题解答：<a href="https://github.com/timbeiko/eth-roadmap-faq">timbeiko&#x2F;eth-roadmap-faq: FAQ about the Ethereum Roadmap (github.com)</a></li></ul><h2 id="官方及社区："><a href="#官方及社区：" class="headerlink" title="官方及社区："></a>官方及社区：</h2><ul><li>合并：<a href="https://ethereum.org/zh/upgrades/merge/">合并 | ethereum.org</a></li><li>信标链：<a href="https://ethereum.org/zh/upgrades/beacon-chain/">信标链 | ethereum.org</a></li><li>解释博客：<a href="https://ethos.dev/beacon-chain/">The Beacon Chain Ethereum 2.0 explainer you need to read first | ethos.dev</a></li><li>更名：<a href="https://blog.ethereum.org/2022/01/24/the-great-eth2-renaming/#zh">The great renaming: what happened to Eth2? | Ethereum Foundation Blog</a></li><li><strong>笔记</strong>：<a href="https://testingthemerge.notion.site/testingthemerge/Testing-the-Merge-d0af826782a34d5ca6ce31aa5e631645">Testing the Merge (notion.site)</a></li><li><strong>状态</strong>：<a href="https://testingthemerge.notion.site/aecd99ce84f44913b94bab7c5236ac0b?v=38ea06e479694e8bacaf2010908f3dc6">Merge Testing Leaderboard (notion.site)</a></li><li>通话记录：<a href="https://notes.ethereum.org/@timbeiko/merge-testing-calls">Merge Testing Call Notes - HackMD (ethereum.org)</a></li><li><strong>资源列表</strong>：<a href="https://notes.ethereum.org/@MarioHavel/merge-resources#Mega-Merge-Resource-List-%F0%9F%90%BC">Mega Merge Resource List 🐼 - HackMD (ethereum.org)</a></li><li>以 rollup 为中心的路线图：<a href="https://ethereum-magicians.org/t/a-rollup-centric-ethereum-roadmap/4698">A rollup-centric ethereum roadmap - Fellowship of Ethereum Magicians (ethereum-magicians.org)</a></li><li>EIP 4844（分片 BLOB 交易）：<a href="https://www.eip4844.com/">EIP-4844: Proto-Danksharding (eip4844.com)</a></li><li>每周以太坊进展：<a href="https://weekinethereumnews.com/">Week in Ethereum News</a></li><li>主网影子分叉追踪：<a href="https://notes.ethereum.org/PhbNw_cGSQ-VKqzGl4bPcg?view">Shadow fork tracker - HackMD (ethereum.org)</a></li><li>历史数据存储瓶颈：<ul><li><a href="https://polynya.mirror.xyz/EpFL1V1amxa8maE-TyjfiifJMij_KZNMvReTDxpVoA4">Historical storage endgame bottleneck: how far can we push? — polynya (mirror.xyz)</a></li><li><a href="https://notes.ethereum.org/@vbuterin/data_sharding_roadmap">A step-by-step roadmap for scaling rollups with calldata expansion and sharding - HackMD (ethereum.org)</a></li></ul></li></ul><h2 id="新闻："><a href="#新闻：" class="headerlink" title="新闻："></a>新闻：</h2><ul><li>宣布：<a href="https://twitter.com/preston_vanloon/status/1526934478916132865">prestonvanloon.eth 在 Twitter: “Ropsten testnet is getting merged on June 8!”</a></li><li>一位关注 Merge 的人员：<a href="https://twitter.com/christine_dkim">Christine Kim (@christine_dkim) &#x2F; Twitter</a></li><li>重要性（基本无有效内容）：<a href="https://fortune.com/2022/05/19/what-is-ethereum-merge-proof-of-work-stake-why-does-merge-matter/">What is the Ethereum merge? Why the Ropsten network test is a huge milestone | Fortune</a></li></ul><h2 id="安全性："><a href="#安全性：" class="headerlink" title="安全性："></a>安全性：</h2><ul><li>对以太坊利益证明的三次攻击：[<a href="https://arxiv.org/abs/2110.10086">2110.10086] Three Attacks on Proof-of-Stake Ethereum (arxiv.org)</a></li><li>重组相关：<a href="https://twitter.com/casparschwa/status/1454511836267692039">caspar 🐼 在 Twitter: “1&#x2F; Let’s do a little thread on how reorgs work in PoS Ethereum and how they will be mitigated 🧵” &#x2F; Twitter</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;1-Merge&quot;&gt;&lt;a href=&quot;#1-Merge&quot; class=&quot;headerlink&quot; title=&quot;1 Merge&quot;&gt;&lt;/a&gt;1 Merge&lt;/h1&gt;&lt;h2 id=&quot;1-1-Merge-路线图&quot;&gt;&lt;a href=&quot;#1-1-Merge-路线图&quot; class=&quot;headerlink&quot; title=&quot;1.1 Merge 路线图&quot;&gt;&lt;/a&gt;1.1 Merge 路线图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/06/29/j1r8VcT6JYO3Cvl.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;合并后，发行的 ETH 数量预计将下降 90%；&lt;/p&gt;</summary>
    
    
    
    <category term="区块链" scheme="http://miaoguoge.xyz/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
    <category term="ETH" scheme="http://miaoguoge.xyz/tags/ETH/"/>
    
  </entry>
  
  <entry>
    <title>以太坊 2.0 知识库</title>
    <link href="http://miaoguoge.xyz/eth2-knowledge-base/"/>
    <id>http://miaoguoge.xyz/eth2-knowledge-base/</id>
    <published>2022-05-23T08:36:57.000Z</published>
    <updated>2022-10-14T06:17:28.800Z</updated>
    
    <content type="html"><![CDATA[<p>来源：<a href="https://kb.beaconcha.in/glossary">Glossary - Ethereum 2.0 Knowledge Base (beaconcha.in)</a></p><h1 id="名词术语"><a href="#名词术语" class="headerlink" title="名词术语"></a>名词术语</h1><h2 id="Beacon-chain（信标链）"><a href="#Beacon-chain（信标链）" class="headerlink" title="Beacon-chain（信标链）"></a>Beacon-chain（信标链）</h2><p>信标链引入了权益证明，也被称为 coordination layer（协调层）。</p><p><strong>作用：</strong></p><ul><li>为验证者分配职责</li><li>最终确定检查点</li><li>执行协议级随机数生成（RNG）</li><li>推进信标链</li><li>在链的头部投票以选择分叉</li></ul><span id="more"></span><h2 id="Slots（时隙）"><a href="#Slots（时隙）" class="headerlink" title="Slots（时隙）"></a>Slots（时隙）</h2><p><strong>32 Slots &#x3D; 1 Epoch</strong></p><p>一个 <strong>12 秒</strong>的时间段，一个随机选择的验证者在此期间可以提出一个区块。一个 slot 中也可以没有新区块。所有的验证者会被分配到某个委员会中，若干个委员会负责证明一个 slot。委员会中的一名验证者将被选为聚合者，而其他验证者则进行证明。在每个 Epoch 之后，验证者会被重新打乱并分配到新的委员会中。每个委员会至少有 128 名验证者。</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h2jfvbawkuj213u0gkabs.jpg"></p><h2 id="Epoch（时段）"><a href="#Epoch（时段）" class="headerlink" title="Epoch（时段）"></a>Epoch（时段）</h2><p><strong>1 Epoch &#x3D; 32 Slots</strong></p><p>约 6.4 分钟。当涉及到验证者队列和最终确定性时，Epoch 有着重要作用。</p><h2 id="Deposit-contract（存款合约）"><a href="#Deposit-contract（存款合约）" class="headerlink" title="Deposit contract（存款合约）"></a>Deposit contract（存款合约）</h2><p>ETH 1.0 上的一个智能合约，是连接 ETH 1.0 和 ETH 2.0 的<strong>网关</strong>。该智能合约接受最低 1 ETH 和有效 Input Data 的交易。信标节点监听该合约并通过 Input Data 来为验证者提供信用。</p><h2 id="Input-Data（输入数据）"><a href="#Input-Data（输入数据）" class="headerlink" title="Input Data（输入数据）"></a>Input Data（输入数据）</h2><p>也称 <strong>deposit data（存款数据）</strong>，是用户生成的 842 长度的字符串，代表验证者公钥和提款公钥，由验证者的私钥签名。Input Data 需要添加到 Deposit contract 中才能被信标链识别。</p><h2 id="Validator（验证者）"><a href="#Validator（验证者）" class="headerlink" title="Validator（验证者）"></a>Validator（验证者）</h2><p>验证者需要将 32 个 ETH 存入 deposit contract 。验证者必须运行一个节点，它的工作是提出区块并签署证明。验证者必须至少有 50% 的时间在线才能获得正回报。</p><h3 id="Eligible-for-activation-amp-Estimated-activation（有资格激活-amp-预计激活）"><a href="#Eligible-for-activation-amp-Estimated-activation（有资格激活-amp-预计激活）" class="headerlink" title="Eligible for activation &amp; Estimated activation（有资格激活 &amp; 预计激活）"></a>Eligible for activation &amp; Estimated activation（有资格激活 &amp; 预计激活）</h3><p>指 pending 中的验证者，它的存款在 “Eligible for activation” 的时间戳被 ETH 2 的链识别。若存在 Pending 的验证者队列，则估算预计激活的时间戳。</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h2jicqvsb6j21ak0bk0u7.jpg"></p><h2 id="Unique-Index（唯一索引）"><a href="#Unique-Index（唯一索引）" class="headerlink" title="Unique Index（唯一索引）"></a>Unique Index（唯一索引）</h2><p>每个已激活的验证者都会有的唯一索引。</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h2jic86j1hj210g0ic764.jpg"></p><h2 id="Current-Balance-amp-Effective-Balance（当前余额-amp-有效余额）"><a href="#Current-Balance-amp-Effective-Balance（当前余额-amp-有效余额）" class="headerlink" title="Current Balance &amp; Effective Balance（当前余额 &amp; 有效余额）"></a>Current Balance &amp; Effective Balance（当前余额 &amp; 有效余额）</h2><p>当前余额是验证者目前持有的 ETH 数量。<strong>有效余额</strong>是由当前余额计算出的。它用于确定验证者收到的奖励或惩罚的大小。有效余额<strong>永远不会高于 32 ETH</strong> 。</p><p>为了增加 1 ETH 有效余额，验证者需要将当前余额增加 1.25 ETH 。举例来说，如果有效余额为 20 ETH，则需要 21.25 ETH 的当前余额才能获得 21 ETH 的有效余额。而有效余额<strong>将在当前余额下降幅度 &gt; 0.25 时进行调整</strong>。</p><p>以下是有关有效余额如何变化的示例：</p><ul><li>如果当前余额为 32.00 ETH —— 有效余额为 32.00 ETH</li><li>如果当前余额从 22 ETH 下降 0.24 至 21.76 ETH —— 有效余额将为 <strong>22.00 ETH</strong></li><li>如果有效余额为 21 ETH，当前余额增加到 22.25 ETH —— 有效余额将增加到 22 ETH</li></ul><h2 id="Slasher（吹哨者）"><a href="#Slasher（吹哨者）" class="headerlink" title="Slasher（吹哨者）"></a>Slasher（吹哨者）</h2><p>Slasher 具有一定独立性，但需要一个信标节点来接收证明。为了发现验证者的恶意活动，slashers 会遍历所有收到的证明，直到发现可罚没的<strong>攻击</strong>。发现的 slashings 会被广播到网络，然后下一个区块提议者会将该证明添加到区块中。区块提议者会因削减恶意验证者而获得奖励。但是，举报人（即 Slasher）不会获得奖励。</p><h3 id="可罚没的攻击行为"><a href="#可罚没的攻击行为" class="headerlink" title="可罚没的攻击行为"></a>可罚没的攻击行为</h3><p><strong>证明违规</strong></p><ul><li><p><strong>Double voting（双重投票）</strong></p><p>一个 attester（非区块提议者的验证者）在一个 epoch 里（也即一个 slot 里）签署了两份不同的证明。</p></li><li><p><strong>Surround votes（环绕投票）</strong></p><p>一个 attester 签署了围绕着另一个 attester 的证明。</p></li></ul><p><strong>提议违规</strong></p><ul><li><p><strong>Double block proposal</strong></p><p>区块提议者在一个 slot 中签署了两个不同的区块。</p></li></ul><h2 id="Attestation（证明）"><a href="#Attestation（证明）" class="headerlink" title="Attestation（证明）"></a>Attestation（证明）</h2><p>验证者的投票，用于确定区块有效性。</p><h2 id="Block-proposer（区块提议者）"><a href="#Block-proposer（区块提议者）" class="headerlink" title="Block proposer（区块提议者）"></a>Block proposer（区块提议者）</h2><p>被信标链选择的一个验证者，负责提议下一个区块。每个 slot 只能有一个有效区块。</p><h2 id="Block-status（区块状态）"><a href="#Block-status（区块状态）" class="headerlink" title="Block status（区块状态）"></a>Block status（区块状态）</h2><ul><li><p><strong>Proposed（已提议）</strong></p><p>该区块已通过，并且被一个验证者提议。</p></li><li><p><strong>Scheduled（已计划）</strong></p><p>验证者们正在提交数据。</p></li><li><p><strong>Missed &#x2F; Skipped（已跳过）</strong></p><p>区块提议者没有在给定的时间内提议区块，因此该区块状态为已跳过。</p></li><li><p><strong>Orphaned（孤儿区块）</strong></p><p>请看下面的例子。1～9 代表 slot 。</p></li></ul><ol><li>slot 1 的验证者提议了区块 a ；</li><li>slot 2 的验证者提议了区块 b ，slot 3 的验证者（下称验证者 3 ）提议了区块 c ；</li><li>slot 4 没有验证者提议区块（如：离线），因此被跳过；</li><li>在 slot 5 &#x2F; 6 处发生了一个分叉：验证者 5 提议了一个区块，但是验证者 6 没有收到这个信息（如：网络延时），因此验证者 6 认为 slot 3 处的 c 是最新块，并紧接着 c 提议了新块 f ；</li><li>这里的关键是分叉选择规则，它决定了哪一个是规范的链。</li></ol><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h2kmc0hxnhj20l104a3yg.jpg" alt="img"></p><h2 id="Validator-Lifecycle（验证者生命周期）"><a href="#Validator-Lifecycle（验证者生命周期）" class="headerlink" title="Validator Lifecycle（验证者生命周期）"></a>Validator Lifecycle（验证者生命周期）</h2><h3 id="1-Deposited（已存款）"><a href="#1-Deposited（已存款）" class="headerlink" title="1. Deposited（已存款）"></a>1. Deposited（已存款）</h3><ul><li>验证者已将 32 ETH 存入 ETH 1 的存款合约，该状态将保持 7 h，以保障 ETH 1 链不受到攻击。</li></ul><h3 id="2-Pending（待定中）"><a href="#2-Pending（待定中）" class="headerlink" title="2. Pending（待定中）"></a>2. Pending（待定中）</h3>]]></content>
    
    
    <summary type="html">&lt;p&gt;来源：&lt;a href=&quot;https://kb.beaconcha.in/glossary&quot;&gt;Glossary - Ethereum 2.0 Knowledge Base (beaconcha.in)&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;名词术语&quot;&gt;&lt;a href=&quot;#名词术语&quot; class=&quot;headerlink&quot; title=&quot;名词术语&quot;&gt;&lt;/a&gt;名词术语&lt;/h1&gt;&lt;h2 id=&quot;Beacon-chain（信标链）&quot;&gt;&lt;a href=&quot;#Beacon-chain（信标链）&quot; class=&quot;headerlink&quot; title=&quot;Beacon-chain（信标链）&quot;&gt;&lt;/a&gt;Beacon-chain（信标链）&lt;/h2&gt;&lt;p&gt;信标链引入了权益证明，也被称为 coordination layer（协调层）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作用：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为验证者分配职责&lt;/li&gt;
&lt;li&gt;最终确定检查点&lt;/li&gt;
&lt;li&gt;执行协议级随机数生成（RNG）&lt;/li&gt;
&lt;li&gt;推进信标链&lt;/li&gt;
&lt;li&gt;在链的头部投票以选择分叉&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="区块链" scheme="http://miaoguoge.xyz/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
    <category term="ETH" scheme="http://miaoguoge.xyz/tags/ETH/"/>
    
  </entry>
  
  <entry>
    <title>ETH2.0节点维护记录</title>
    <link href="http://miaoguoge.xyz/eth2-node/"/>
    <id>http://miaoguoge.xyz/eth2-node/</id>
    <published>2022-05-11T08:26:29.000Z</published>
    <updated>2022-05-17T05:24:31.927Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-ETH2-0节点维护记录"><a href="#1-ETH2-0节点维护记录" class="headerlink" title="1. ETH2.0节点维护记录"></a>1. ETH2.0节点维护记录</h2><h3 id="1-1-测试网概述"><a href="#1-1-测试网概述" class="headerlink" title="1.1 测试网概述"></a>1.1 测试网概述</h3><p>关于ETH2.0，可阅读<a href="https://miaoguoge.xyz/layer2/">Layer2技术 | 星空凛的博客 (miaoguoge.xyz)</a>。</p><p>据我理解，ETH2.0有着两大类的测试网：</p><ul><li>一类侧重于PoS机制，面向于矿工以及新加入的“验证者”，代表：<a href="https://prater.launchpad.ethereum.org/zh/">Prater</a>。它是没有历史包袱的纯ETH2的PoS测试网，类似于1.0时代的这些测试网络：</li></ul><span id="more"></span><p>  <img src="https://i0.hdslb.com/bfs/album/9e1b8a661534881b4fe339e38c5ce5bef7a44f3f.png"></p><p>  同时也被大多数2.0的客户端原生支持：</p><p>  <img src="https://i0.hdslb.com/bfs/album/21053d376b12899af3f6d0394c86b983588871cd.png"></p><ul><li><p>另一类则侧重于the merge，面向于开发者、节点运营商等，代表：<a href="https://kiln.launchpad.ethereum.org/zh">Kiln</a>。它们模拟的是合并这个过程以及合并完成后的整个网络，也叫做Merge Testnet，这些测试网似乎是由官方来进行维护的，隶属于<a href="https://twitter.com/search?q=%23TestingTheMerge">#TestingTheMerge</a>这一以太坊社区计划，由<a href="https://twitter.com/vdWijden">Marius van der Wijden</a>和<a href="https://twitter.com/parithosh_j">Parithosh Jayanthi</a>领导，并且在进行着不向后兼容的升级：</p><p><img src="https://i0.hdslb.com/bfs/album/1ff7a007fb526792b75e4283823a2ccc9143fa55.png"></p><p>2021年12月20日发布Kintsugi测试网，2022年3月14日发布继任者Kiln测试网，并宣布这有望是最后一个 Merge Testnet，同时将弃用Kintsugi测试网：</p><p><img src="https://i0.hdslb.com/bfs/album/8aa7244fa4bf6663fd422d6d25f1c0256d9c334d.png"></p><p>与以太坊主网一样，Kiln 的执行层在PoW机制下启动，与运行PoS的信标链并行。</p><p>如果想要在kiln测试网上运行节点，则大部分需要Geth配合另一个2.0的客户端共同来完成，并且需要手动make一个特殊的版本：</p><p><img src="https://i0.hdslb.com/bfs/album/02195e36ffc80ff76f28c76bfbccd0fe23235856.png"></p><p>虽说有人搞出来了自动化的Docker镜像，但硬件要求很难负担得起：</p><p><img src="https://i0.hdslb.com/bfs/album/130073ef98b9f9bb12b1c47b34f9dc5455fab75a.png"></p><p>因此我选择的是使用<a href="https://github.com/remyroy/ethstaker/blob/main/merge-devnet.md">Geth + Lighthouse</a>的方案。</p></li></ul><h3 id="1-2-Geth-Lighthouse部署指引"><a href="#1-2-Geth-Lighthouse部署指引" class="headerlink" title="1.2 Geth + Lighthouse部署指引"></a>1.2 Geth + Lighthouse部署指引</h3><h4 id="1-初始化工作"><a href="#1-初始化工作" class="headerlink" title="1. 初始化工作"></a>1. 初始化工作</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /disk</span><br><span class="line">sudo mkdir ETH2TestnetData</span><br><span class="line">sudo mkdir ETH2LighthouseData</span><br><span class="line">sudo chmod -R 777 ETH2TestnetData ETH2LighthouseData</span><br><span class="line">docker pull ubuntu</span><br><span class="line">docker run -itd -v /disk/ETH2TestnetData:/var/lib/goethereum -v /disk/ETH2LighthouseData:/var/lib/lighthouse -p 30304:30303 --name ETH2Testnet --hostname ETH2Testnet ubuntu</span><br><span class="line">docker <span class="built_in">exec</span> -it ETH2Testnet zsh</span><br><span class="line">apt update</span><br><span class="line">apt install -y zsh</span><br><span class="line">zsh</span><br><span class="line">apt install -y curl git</span><br><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br><span class="line">apt install -y vim</span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">vim .zshrc  <span class="comment"># 修改主题为&quot;ys&quot;</span></span><br><span class="line"><span class="built_in">source</span> .zshrc</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br><span class="line">apt install -y tmux</span><br><span class="line">vim .zshrc  <span class="comment"># 修改插件为&quot;git tmux extract zsh-syntax-highlighting zsh-autosuggestions&quot;</span></span><br><span class="line"><span class="built_in">source</span> .zshrc</span><br><span class="line">apt install -y locales</span><br><span class="line">locale-gen zh_CN.UTF-8</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export LANG=C.UTF-8&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="comment"># Ctrl+P+Q</span></span><br><span class="line">docker commit -m=<span class="string">&quot;ubuntu_mgg&quot;</span> -a=<span class="string">&quot;hoshimgg&quot;</span> ETH2Testnet ubuntu/mgg:1.0</span><br></pre></td></tr></table></figure><h4 id="2-构建"><a href="#2-构建" class="headerlink" title="2. 构建"></a>2. 构建</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it ETH2Testnet zsh</span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">apt install -y build-essential pkg-config cmake clang wget ccze  <span class="comment"># 70 Shanghai</span></span><br><span class="line">wget https://go.dev/dl/go1.17.8.linux-amd64.tar.gz</span><br><span class="line">rm -rf /usr/<span class="built_in">local</span>/go &amp;&amp; tar -C /usr/<span class="built_in">local</span> -xzf go1.17.8.linux-amd64.tar.gz</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/go/bin</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;$PATH:/usr/local/go/bin&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line">rm go1.17.8.linux-amd64.tar.gz</span><br><span class="line">curl https://sh.rustup.rs -sSf | sh  <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">source</span> <span class="variable">$HOME</span>/.cargo/env</span><br><span class="line">git <span class="built_in">clone</span> -b merge-kiln-v2 https://github.com/MariusVanDerWijden/go-ethereum.git</span><br><span class="line"><span class="built_in">cd</span> go-ethereum</span><br><span class="line">make geth</span><br><span class="line">cp ./build/bin/geth /usr/<span class="built_in">local</span>/bin</span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">git <span class="built_in">clone</span> -b unstable https://github.com/sigp/lighthouse.git</span><br><span class="line"><span class="built_in">cd</span> lighthouse</span><br><span class="line">make</span><br><span class="line">cp ~/.cargo/bin/lighthouse /usr/<span class="built_in">local</span>/bin</span><br></pre></td></tr></table></figure><h4 id="3-配置"><a href="#3-配置" class="headerlink" title="3. 配置"></a>3. 配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/eth-clients/merge-testnets.git</span><br><span class="line">useradd --no-create-home --shell /bin/<span class="literal">false</span> goeth</span><br><span class="line">mkdir -p /var/lib/goethereum</span><br><span class="line">cp ~/merge-testnets/kiln/genesis.json /var/lib/goethereum/</span><br><span class="line">chown -R goeth:goeth /var/lib/goethereum</span><br><span class="line">apt install sudo</span><br><span class="line">sudo -u goeth /usr/<span class="built_in">local</span>/bin/geth init /var/lib/goethereum/genesis.json --datadir /var/lib/goethereum</span><br></pre></td></tr></table></figure><p>编辑<code>~/scripts/start_geth.sh</code>文件，内容如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/geth \</span><br><span class="line">    <span class="attr">--syncmode</span>=full \</span><br><span class="line">    --http \</span><br><span class="line">    --datadir /var/lib/goethereum \</span><br><span class="line">    --metrics \</span><br><span class="line">    --metrics.expensive \</span><br><span class="line">    --pprof \</span><br><span class="line">    <span class="attr">--networkid</span>=<span class="number">1337802</span> \</span><br><span class="line">    <span class="attr">--http.api</span>=<span class="string">&quot;engine,eth,web3,net,debug&quot;</span> \</span><br><span class="line">    --http.corsdomain &quot;*&quot; \</span><br><span class="line">    --http.addr &quot;0.0.0.0&quot; \</span><br><span class="line">    <span class="attr">--authrpc.jwtsecret</span>=/var/lib/goethereum/jwtsecret \</span><br><span class="line">    --override.terminaltotaldifficulty 20000000000000 \</span><br><span class="line">    --bootnodes &quot;enode://c354db99124f0faf677ff0e75c3cbbd568b2febc186af664e0c51ac435609badedc67a18a63adb64dacc1780a28dcefebfc29b83fd1a3f4aa3c0eb161364cf94@164.92.130.5:30303&quot;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ctrl+P+Q</span></span><br><span class="line">docker commit -m=<span class="string">&quot;eth2node/testnet&quot;</span> -a=<span class="string">&quot;hoshimgg&quot;</span> ETH2Testnet eth2node/testnet:1.4</span><br><span class="line">docker <span class="built_in">exec</span> -it ETH2Testnet zsh</span><br><span class="line"><span class="built_in">cd</span> ~/scripts</span><br><span class="line">ts geth</span><br><span class="line">zsh start_geth.sh</span><br><span class="line"><span class="comment"># Ctrl+B D</span></span><br><span class="line">useradd --no-create-home --shell /bin/<span class="literal">false</span> lighthousebeacon</span><br><span class="line">mkdir -p /var/lib/lighthouse</span><br><span class="line">chown -R lighthousebeacon:lighthousebeacon /var/lib/lighthouse</span><br></pre></td></tr></table></figure><p>编辑<code>~/scripts/start_lighthouse.sh</code>文件，内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sudo -u lighthousebeacon /usr/local/bin/lighthouse bn \</span><br><span class="line">    --network kiln \</span><br><span class="line">    --datadir /var/lib/lighthouse \</span><br><span class="line">    --staking \</span><br><span class="line">    --http-allow-sync-stalled \</span><br><span class="line">    --merge \</span><br><span class="line">    --execution-endpoints http://127.0.0.1:8551 \</span><br><span class="line">    --metrics \</span><br><span class="line">    --validator-monitor-auto \</span><br><span class="line">    --jwt-secrets=&quot;/var/lib/goethereum/jwtsecret&quot; \</span><br><span class="line">    --terminal-total-difficulty-override=20000000000000 \</span><br><span class="line">    --boot-nodes=&quot;enr:-Iq4QMCTfIMXnow27baRUb35Q8iiFHSIDBJh6hQM5Axohhf4b6Kr_cOCu0htQ5WvVqKvFgY28893DHAg8gnBAXsAVqmGAX53x8JggmlkgnY0gmlwhLKAlv6Jc2VjcDI1NmsxoQK6S-Cii_KmfFdUJL2TANL3ksaKUnNXvTCv1tLwXs0QgIN1ZHCCIyk&quot;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chmod +r /var/lib/goethereum/jwtsecret</span><br><span class="line">ts lighthouse</span><br><span class="line">zsh start_lighthouse.sh</span><br><span class="line"><span class="comment"># Ctrl+B D</span></span><br></pre></td></tr></table></figure><p>理论上来说，这样就部署完成了，但是我在运行时碰到了问题，而且并没有搜寻到解决方案，只好在GitHub上提了一个issue：<a href="https://github.com/remyroy/ethstaker/issues/13">Errors when deploying in Docker · Issue #13 · remyroy&#x2F;ethstaker (github.com)</a>，目前还没有人回复，因此，我觉定先用上文提到的自动化的Docker镜像作为替代方案尝试一下。</p><hr><blockquote><p>2022年5月11日更新</p></blockquote><p>经过数天的验证，HDD似乎还承受的住，因此该方案（Geth + Lighthouse）放弃。</p><hr><h3 id="1-3-EthDocker部署指引"><a href="#1-3-EthDocker部署指引" class="headerlink" title="1.3 EthDocker部署指引"></a>1.3 EthDocker部署指引</h3><p><a href="https://eth-docker.net/docs/Usage/BeforeYouStart">Before you start. | eth-docker</a></p><p><a href="https://github.com/eth-educators/eth-docker/blob/merge/KILN.md">eth-docker&#x2F;KILN.md at merge · eth-educators&#x2F;eth-docker (github.com)</a></p><p>文档中提到“共识客户端数据库很小，大约20-100GB，但不知道一旦与PoW合并完成，增长会是什么样子。”</p><p>首先在 <a href="https://kiln.themerge.dev/">https://kiln.themerge.dev</a> 上为自己的kiln钱包地址申请资金，如果申请成功，则会获得32.08个ETH：</p><p><img src="https://i0.hdslb.com/bfs/album/cc1b473747ad5c8af7d5364e1eb25303a40cf72c.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG docker ubuntu</span><br><span class="line">newgrp docker</span><br><span class="line"><span class="built_in">cd</span> ~/mgg</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/eth-educators/eth-docker.git merge-test &amp;&amp; <span class="built_in">cd</span> merge-test &amp;&amp; git fetch origin merge &amp;&amp; git checkout merge</span><br><span class="line">./ethd config</span><br></pre></td></tr></table></figure><p>然后便会出现下图：</p><p><img src="https://i0.hdslb.com/bfs/album/06c308ee0d503f90dd2adeb717286db622121be4.png"></p><p>通过<code>Tab</code>键选择<code>&lt;Ok&gt;</code>，然后回车；</p><p><img src="https://i0.hdslb.com/bfs/album/302f242120770eb81fedec91ce6fc8008410fdc3.png"></p><p>这里选择完整验证者节点；</p><p><img src="https://i0.hdslb.com/bfs/album/0ededa9733549f7e7b7a44fb466b042d6b7aab25.png"></p><p>这里我选择的是默认的Teku；</p><p><img src="https://i0.hdslb.com/bfs/album/adc87efe44baced5d856d7344d21e3e813037539.png"></p><p>这里输入自己的用户名；</p><p><img src="https://i0.hdslb.com/bfs/album/f6c37ec8797252a608cff9b0356b15fd074a4429.png"></p><p>这里选择Geth；</p><p><img src="https://i0.hdslb.com/bfs/album/6602c94b6f5518cf141f0fb044934f928c7d6d8e.png"></p><p>这里选择Yes，使用控制台面板；</p><p><img src="https://i0.hdslb.com/bfs/album/b0977f753cdc35b213f7db987e2eea2e04a5be36.png"></p><p>这里输入自己的地址；然后整个配置过程便完成了：</p><p><img src="https://i0.hdslb.com/bfs/album/8b59f54e3bc67d2228b1c9ff1a7a461f4a2849e5.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /disk</span><br><span class="line">sudo mkdir ETH2DockerData</span><br><span class="line">sudo chmod -R 777 ETH2DockerData</span><br><span class="line"><span class="built_in">cd</span> ~/mgg/merge-test</span><br></pre></td></tr></table></figure><p>此时修改一下<code>geth.yml</code>，将<code>execution</code>下的<code>volumes</code>中的<code>gethexecution-data</code>改为<code>/disk/ETH2DockerData</code>：</p><p><img src="https://i0.hdslb.com/bfs/album/518b45f4917eb5a2890e1fbbf15cd8bcbaf68132.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ts long_time_work</span><br><span class="line">docker-compose build</span><br><span class="line"><span class="comment"># 耐心等待</span></span><br><span class="line">docker-compose run --rm deposit-cli-new --eth1_withdrawal_address 0x0F42798dEf01713f2e710669e2182B2d3D4110E3</span><br><span class="line"><span class="comment"># 验证者数量填1</span></span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/9d3f1b85d17f825640c2b4c167158566c3d62289.png"></p><p>去<a href="https://kiln.launchpad.ethereum.org/zh/overview">以太坊官网</a>成为验证者：</p><p><img src="https://i0.hdslb.com/bfs/album/7116f56856cae564cfc4fe8458fedb21af1964e7.png"></p><p><img src="https://i0.hdslb.com/bfs/album/033edb835ede8d25514d5bb395747acb01280ce9.png"></p><p><img src="https://i0.hdslb.com/bfs/album/69ef178bad85d5c7c6ae469aec563f9650268de1.png"></p><p><img src="https://i0.hdslb.com/bfs/album/86e590caea566ccd59cf889e2cf0394ad26b42e6.png"></p><p><img src="https://i0.hdslb.com/bfs/album/00b660f408d0345e189b56f39fb6fa2f2623f846.png"></p><p><img src="https://i0.hdslb.com/bfs/album/f56a9f5dfe6bf0816bdf83b468407bd8349596c3.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./ethd keyimport</span><br><span class="line">./ethd up</span><br></pre></td></tr></table></figure><h3 id="1-4-EthDocker-配置更改"><a href="#1-4-EthDocker-配置更改" class="headerlink" title="1.4 EthDocker 配置更改"></a>1.4 EthDocker 配置更改</h3><h4 id="1-docker-compose配置文件"><a href="#1-docker-compose配置文件" class="headerlink" title="1. docker-compose配置文件"></a>1. docker-compose配置文件</h4><p>如果修改了dc的配置文件，比如修改了<code>geth.yml</code>：</p><p><img src="https://i0.hdslb.com/bfs/album/c19970dbb2d382d48a2925e94c26aaeb781a01cf.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/mgg/merge-test</span><br><span class="line">./ethd stop</span><br><span class="line">dc -f geth.yml build</span><br><span class="line">./ethd up</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-ETH2-0节点维护记录&quot;&gt;&lt;a href=&quot;#1-ETH2-0节点维护记录&quot; class=&quot;headerlink&quot; title=&quot;1. ETH2.0节点维护记录&quot;&gt;&lt;/a&gt;1. ETH2.0节点维护记录&lt;/h2&gt;&lt;h3 id=&quot;1-1-测试网概述&quot;&gt;&lt;a href=&quot;#1-1-测试网概述&quot; class=&quot;headerlink&quot; title=&quot;1.1 测试网概述&quot;&gt;&lt;/a&gt;1.1 测试网概述&lt;/h3&gt;&lt;p&gt;关于ETH2.0，可阅读&lt;a href=&quot;https://miaoguoge.xyz/layer2/&quot;&gt;Layer2技术 | 星空凛的博客 (miaoguoge.xyz)&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;据我理解，ETH2.0有着两大类的测试网：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一类侧重于PoS机制，面向于矿工以及新加入的“验证者”，代表：&lt;a href=&quot;https://prater.launchpad.ethereum.org/zh/&quot;&gt;Prater&lt;/a&gt;。它是没有历史包袱的纯ETH2的PoS测试网，类似于1.0时代的这些测试网络：&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="区块链" scheme="http://miaoguoge.xyz/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
    <category term="ETH" scheme="http://miaoguoge.xyz/tags/ETH/"/>
    
  </entry>
  
  <entry>
    <title>抓包小脚本汇总</title>
    <link href="http://miaoguoge.xyz/packet-capture-tools/"/>
    <id>http://miaoguoge.xyz/packet-capture-tools/</id>
    <published>2022-05-10T14:28:49.000Z</published>
    <updated>2022-05-10T14:35:00.510Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-处理cookie"><a href="#1-处理cookie" class="headerlink" title="1. 处理cookie"></a>1. 处理cookie</h2><p>将浏览器开发者工具中的cookie格式化为dict(json)。</p><p><img src="https://i0.hdslb.com/bfs/album/39de49be18583940ba9d338ea9b162374a8d54b1.png"></p><span id="more"></span><p>复制此处的cookie到脚本cookies变量里。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">cookies = <span class="string">&#x27;复制cookie到这里&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pretty_json</span>(<span class="params">json_data</span>):</span></span><br><span class="line">    <span class="keyword">return</span> json.dumps(json_data, indent=<span class="number">4</span>, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    cookie_list = cookies.split(<span class="string">&#x27;; &#x27;</span>)</span><br><span class="line">    cookie_dict = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> cookie <span class="keyword">in</span> cookie_list:</span><br><span class="line">        key, value = cookie.split(<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">        cookie_dict[key] = value</span><br><span class="line">    <span class="built_in">print</span>(pretty_json(cookie_dict))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后复制打印出来的内容即可。</p><h2 id="持续更新中……"><a href="#持续更新中……" class="headerlink" title="持续更新中……"></a>持续更新中……</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-处理cookie&quot;&gt;&lt;a href=&quot;#1-处理cookie&quot; class=&quot;headerlink&quot; title=&quot;1. 处理cookie&quot;&gt;&lt;/a&gt;1. 处理cookie&lt;/h2&gt;&lt;p&gt;将浏览器开发者工具中的cookie格式化为dict(json)。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i0.hdslb.com/bfs/album/39de49be18583940ba9d338ea9b162374a8d54b1.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技巧" scheme="http://miaoguoge.xyz/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="抓包" scheme="http://miaoguoge.xyz/tags/%E6%8A%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>ETH1.0节点维护记录</title>
    <link href="http://miaoguoge.xyz/eth1-node/"/>
    <id>http://miaoguoge.xyz/eth1-node/</id>
    <published>2022-04-04T14:33:06.000Z</published>
    <updated>2022-05-14T10:04:52.181Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-ETH1-0-节点维护记录"><a href="#1-ETH1-0-节点维护记录" class="headerlink" title="1. ETH1.0 节点维护记录"></a>1. ETH1.0 节点维护记录</h2><ul><li><p>1月24日，在测试服务器外环境上部署geth，当时发现其经过一段时间同步后会异常的持续进入trie node同步阶段，但并不影响同步和接口调用，因此未深究；</p></li><li><p>2月6日，在主服务器上通过Docker部署geth，在下一阶段前一切正常；</p><span id="more"></span></li><li><p>3月1日，服务器OOM，重启后为geth加上内存限制，至此开始出现各种问题：</p><ul><li><p>geth开始频繁出现内存溢出问题，内存占用超过限制被Docker关停，最开始每次启动后能存活1-2天，后来一次启动只能存活数小时；</p></li><li><p>geth的同步暂停在了2月8号，如果进行重启，则同步会回滚到2月7号，然后在同步到2月8号后依然暂停；</p><img src="https://i0.hdslb.com/bfs/album/7217761929af13118d78a2e23e95e7d97bdeb5ca.png"  /></li><li><p>geth异常的始终处在数据库压缩过程里：</p><img src="https://i0.hdslb.com/bfs/album/db59d5dd3a8689f9b61016e3491968ddd3b23d8a.png"  /></li></ul></li><li><p>3月7日，尝试设置缓存大小和垃圾回收机制去改善内存溢出问题，但没有效果；</p></li><li><p>3月8日，发现 docker pull 下来的 latest 的镜像是开发版而不是稳定版的，再换成稳定版之后，内存溢出的问题不再出现了，但是同步暂停和始终进行数据库压缩的问题依然没有解决；</p></li><li><p>3月9日，通过设置 nocompaction 标志去禁用数据库压缩，但没有效果；</p></li><li><p>3月16日，查询文档和issue，发现更换版本、程序突然停止都曾有人出现过数据库压缩问题，结合geth日志中的：</p><p><img src="https://i0.hdslb.com/bfs/album/3a03ec2af860d8b90bc087452382735c54b8884e.png"></p><p>提出了始终进行数据库压缩的猜想：在上次服务器OOM时，数据库损坏了，虽然geth尝试进行了修复，但没有修复好。</p><p>同时发现 fast 节点在同步到接近 chain tip 的时候就会自动切换成full模式：</p><p><img src="https://i0.hdslb.com/bfs/album/0983ff96ab0d829bf978abb45d92e20d1869364f.png"></p><p>结合issue中有人把数据存到HDD里跟我碰到了同样的问题，提出了同步暂停的猜想：HDD带不起来full模式下的计算（这个在issue中有提到），所以它一直没法往前同步；</p></li><li><p>3月17日，开了一个新的节点用于验证猜想，新节点同步速度约为 1.6天&#x2F;min ；</p></li><li><p>3月19日，新节点同步到2021年底，此时返回当前同步状态的RPC接口出现故障；</p></li><li><p>3月23日，对新节点进行重启后恢复正常，以高速同步到了3月20号（这印证了旧数据库确实是损坏了），随后同步速度大幅下降到了 0.2h&#x2F;min ，这部分印证了上述的同步暂停的猜想；</p></li><li><p>3月24日，观察到新节点虽同步速度较慢，但一直在工作未出异常，于是将已经同步到3月20日的区块数据进行备份，并将旧节点和损坏的旧数据库删除；</p></li><li><p>3月25日，新节点同步到了3月24日后，RPC接口再次出现故障（这时我认为返回当前同步状态是geth最基础的接口，它挂了估计其他的也都挂了，后来证实我是错的），重启后同步到了当时的 4h 前，然后再次故障；</p></li><li><p>3月27日，加上了一旦监控到故障就自动进行重启的功能，一次启动可以存活约一个半小时，可以同步大半天的区块数据，同步的进度是能够赶得上出块的速度的，但这样取数据的接口会受到影响；并进一步发现它在同步到逼近当前时间时必定会发生故障：</p><img src="https://i0.hdslb.com/bfs/album/ce4008a22979d15d86e77ebdb485093c3419bc8b.png"  /></li><li><p>3月28日，将节点分为A、B两个节点进行实验，A、B共用同一套，原先的新节点作为节点B，暂停运行；并尝试使用nodiscover标志去暂停同步，发现加入标志后节点不会进行同步，同时无法返回当前同步状态，但取数据的接口<strong>仍然可用</strong>，但无法同步的问题需要解决（当时设想的是通过加锁的方式，在无人取数据的时候让他同步）；</p></li><li><p>3月29日，暂停了A节点，启动节点B，果然发现即使不加入nodiscover取数据的接口仍可用，这样nodiscover标志就没有存在的意义了，所以就删掉了节点A，将正常的节点B移至节点A；</p></li><li><p>4月4日，抛弃了geth原生提供的RPC接口，使用自建的<code>get_block_timestamp</code>接口，向上枚举块高，一旦节点无法返回对应块的信息，就证明该块还未同步到；迂回的获取了节点的同步状态，意外的发现他一直都在后台默默同步，也一直保持了接近实时的数据：</p><img src="https://i0.hdslb.com/bfs/album/e63e33a84beb9f9ebd73b2d8a7184f32406217b2.png"  /></li><li><p>2022年5月11日，前几天服务器硬盘满了，节点宕机，本以为有3月份的备份，问题不大，但是将备份的数据库覆盖到当前数据库之后，节点一直处于<code>Generating state snapshot</code>状态，无法使用接口。因此可得出，备份数据库无意义，只好从头开始同步。</p></li><li><p>2022年5月14日，发现仅仅清空数据文件夹也不行，必须将容器删掉重新创建。</p></li></ul><h2 id="2-ETH1-0总结"><a href="#2-ETH1-0总结" class="headerlink" title="2. ETH1.0总结"></a>2. ETH1.0总结</h2><ol><li><p>该过程中我最大的错误就是过于信任了节点提供的关于自身状态的接口，而没有通过其他接口对实际情况进行测试；</p></li><li><p>千万不能让geth被暴力退出，否则极大概率会造成数据库损坏；为应对此情况，可定时备份一下区块数据，考虑到同步速度，每3个月左右备份一次即可；</p><hr><blockquote><p>2022年5月11日更新</p></blockquote><p>备份并不能让节点恢复状态，备份无意义。</p><hr></li><li><p>在启动参数中<code>--nocompaction </code>标志来防止数据库压缩，用空间换取同步效率。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-ETH1-0-节点维护记录&quot;&gt;&lt;a href=&quot;#1-ETH1-0-节点维护记录&quot; class=&quot;headerlink&quot; title=&quot;1. ETH1.0 节点维护记录&quot;&gt;&lt;/a&gt;1. ETH1.0 节点维护记录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1月24日，在测试服务器外环境上部署geth，当时发现其经过一段时间同步后会异常的持续进入trie node同步阶段，但并不影响同步和接口调用，因此未深究；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2月6日，在主服务器上通过Docker部署geth，在下一阶段前一切正常；&lt;/p&gt;</summary>
    
    
    
    <category term="区块链" scheme="http://miaoguoge.xyz/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
    <category term="ETH" scheme="http://miaoguoge.xyz/tags/ETH/"/>
    
  </entry>
  
  <entry>
    <title>Geth snap同步模式下可用的RPC接口</title>
    <link href="http://miaoguoge.xyz/geth-snap-rpc/"/>
    <id>http://miaoguoge.xyz/geth-snap-rpc/</id>
    <published>2022-01-26T06:55:33.000Z</published>
    <updated>2022-03-05T12:57:31.050Z</updated>
    
    <content type="html"><![CDATA[<p>Geth客户端共有三种同步模式：”snap”, “full” 和 “light”，默认是snap（前身为fast），本篇文章探究snap模式下可用的RPC接口。</p><span id="more"></span><ul><li>snap：同步所有的区块头、区块体和状态数据，但不对区块中的交易进行重放以生成状态数据，只会在后期对区块中的数据（包括交易）进行<strong>校验</strong>。 </li><li>full：同步所有的区块头，区块体，并重放区块中的交易以<strong>生成</strong>状态数据。所有区块和区块中的交易都会被<strong>逐一验证</strong>。</li><li>light：同步所有区块头，不同步区块体和状态数据，仅在需要时从网络上其他节点处获取。不会主动进行校验（仅在读取时进行哈希校验）。</li></ul><p>关于以太坊客户端的更多信息：<a href="http://miaoguoge.xyz/ETH-note/#3-client">以太坊学习笔记</a></p><p>即使是snap模式，在同步后期（约80%进度之后）依然需要类似full模式参与加密校验（同步trienode），不幸的是，HDD无法支撑起这一过程所需的大量读写请求（<a href="https://github.com/ethereum/go-ethereum/issues/20938#issuecomment-616402016">geth progress when switching to trie download · Issue #20938 · ethereum&#x2F;go-ethereum (github.com)</a>）。因此，本文中某些被标记为<code>不可用</code>的接口可能只是因为尚未完全同步。</p><p><strong>state trie：</strong></p><p>snap节点因为没有执行任何交易，所以没有任何可用的账户状态（即余额、智能合约代码和数据）。这些需要单独下载并与最新块进行交叉检查。这个阶段称为state trie 下载。节点以加密方式链接到每个块，以便可以实际验证账户没有被篡改。这种加密链接是通过在账户之上创建一个树结构来完成的，这个包含所有帐户和中间加密证明的巨大数据结构称为state trie。</p><p>而这个巨型的数据结构仍然在不断变化：每个块（每15 秒）要从这个树中删除约 1000 个节点，并添加约 2000 个新节点。这意味着节点需要同步每秒更改200次的数据集（这对机械硬盘来说是不可承受的）。在下载时，一个块只包含一个root state，当节点开始同步时，它只知道 1 个trie节点并尝试下载它。但是该节点最多可以引用 16 个新节点，因此在下一步中，节点又开始同步 16 个新节点。</p><p>官方API文档：<a href="https://playground.open-rpc.org/?schemaUrl=https://raw.githubusercontent.com/ethereum/eth1.0-apis/assembled-spec/openrpc.json&uiSchema%5BappBar%5D%5Bui:splitView%5D=false&uiSchema%5BappBar%5D%5Bui:input%5D=false&uiSchema%5BappBar%5D%5Bui:examplesDropdown%5D=false">OPEN-RPC Playground</a></p><p>中文API文档：<a href="http://cw.hubwiz.com/card/c/ethereum-json-rpc-api/">以太坊JSON RPC手册</a></p><h2 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h2><h3 id="✔web3-clientVersion"><a href="#✔web3-clientVersion" class="headerlink" title="✔web3_clientVersion"></a>✔web3_clientVersion</h3><p>返回当前的客户端版本。可用。</p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;web3_clientVersion&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: <span class="string">&quot;Geth/v1.10.16-unstable-f9ce40bb-20220124/linux-amd64/go1.17.6&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="✔web3-sha3"><a href="#✔web3-sha3" class="headerlink" title="✔web3_sha3"></a>✔web3_sha3</h3><p>返回指定数据的<code>Keccak-256</code>哈希值。可用。</p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;web3_sha3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;0x68656c6c6f20776f726c64&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: <span class="string">&quot;0x47173285a8d7341e5e972fc677286384f802f8ef42a5ec5f03bbfa254cb01fad&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="net"><a href="#net" class="headerlink" title="net"></a>net</h2><h3 id="✔net-version"><a href="#✔net-version" class="headerlink" title="✔net_version"></a>✔net_version</h3><p>返回当前连接网络的ID。可用。</p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;net_version&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><ul><li>1: Ethereum Mainnet</li><li>2: Morden Testnet (deprecated)</li><li>3: Ropsten Testnet</li><li>4: Rinkeby Testnet</li><li>42: Kovan Testnet</li></ul><h3 id="✔net-listening"><a href="#✔net-listening" class="headerlink" title="✔net_listening"></a>✔net_listening</h3><p>返回客户端是否处于监听网络连接的状态。可用。</p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;net_listening&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="✔net-peerCount"><a href="#✔net-peerCount" class="headerlink" title="✔net_peerCount"></a>✔net_peerCount</h3><p>返回当前客户端所连接的对端节点数量。可用。</p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;net_peerCount&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: <span class="string">&quot;0x32&quot;</span> <span class="comment">// 16进制</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="eth"><a href="#eth" class="headerlink" title="eth"></a>eth</h2><h3 id="❌eth-protocolVersion"><a href="#❌eth-protocolVersion" class="headerlink" title="❌eth_protocolVersion"></a>❌eth_protocolVersion</h3><p>返回当前以太坊协议的版本。<strong>不可用。</strong></p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_protocolVersion&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;error&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;code&quot;</span>: <span class="number">-32601</span>,</span><br><span class="line">        <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;the method eth_protocolVersion does not exist/is not available&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="✔eth-syncing"><a href="#✔eth-syncing" class="headerlink" title="✔eth_syncing"></a>✔eth_syncing</h3><p>对于已经同步的客户端，该调用返回一个描述同步状态的对象；对于未同步客户端，返回false。可用。</p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_syncing&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;currentBlock&quot;</span>: <span class="string">&quot;0xd6d765&quot;</span>, <span class="comment">// 当前块</span></span><br><span class="line">        <span class="attr">&quot;healedBytecodeBytes&quot;</span>: <span class="string">&quot;0x23ba0f&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;healedBytecodes&quot;</span>: <span class="string">&quot;0x108&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;healedTrienodeBytes&quot;</span>: <span class="string">&quot;0x469c3cba&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;healedTrienodes&quot;</span>: <span class="string">&quot;0x3baacb&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;healingBytecode&quot;</span>: <span class="string">&quot;0x0&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;healingTrienodes&quot;</span>: <span class="string">&quot;0x454&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;highestBlock&quot;</span>: <span class="string">&quot;0xd6d7c1&quot;</span>, <span class="comment">// 预估最高块</span></span><br><span class="line">        <span class="attr">&quot;startingBlock&quot;</span>: <span class="string">&quot;0x0&quot;</span>, <span class="comment">// 开始块</span></span><br><span class="line">        <span class="attr">&quot;syncedAccountBytes&quot;</span>: <span class="string">&quot;0x955cae310&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;syncedAccounts&quot;</span>: <span class="string">&quot;0x9f891ad&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;syncedBytecodeBytes&quot;</span>: <span class="string">&quot;0xb24fd499&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;syncedBytecodes&quot;</span>: <span class="string">&quot;0x78dfc&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;syncedStorage&quot;</span>: <span class="string">&quot;0x24528b05&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;syncedStorageBytes&quot;</span>: <span class="string">&quot;0x1e667173fe&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="❌eth-coinbase"><a href="#❌eth-coinbase" class="headerlink" title="❌eth_coinbase"></a>❌eth_coinbase</h3><p>返回客户端的coinbase地址。<strong>不可用。</strong></p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_coinbase&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;error&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;code&quot;</span>: <span class="number">-32000</span>,</span><br><span class="line">        <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;etherbase must be explicitly specified&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="✔eth-mining"><a href="#✔eth-mining" class="headerlink" title="✔eth_mining"></a>✔eth_mining</h3><p>返回客户端是否在挖矿。可用。</p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_mining&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="✔eth-hashrate"><a href="#✔eth-hashrate" class="headerlink" title="✔eth_hashrate"></a>✔eth_hashrate</h3><p>返回节点挖矿时每秒可算出的哈希数量。可用。</p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_hashrate&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: <span class="string">&quot;0x0&quot;</span> <span class="comment">// 没有在挖矿，返回0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="✔eth-gasPrice"><a href="#✔eth-gasPrice" class="headerlink" title="✔eth_gasPrice"></a>✔eth_gasPrice</h3><p>返回当前的gas价格，单位：wei。可用。</p><p>经与<a href="https://etherscan.io/gastracker">Etherscan</a>比较，确为实时gas价格。</p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_gasPrice&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: <span class="string">&quot;0x14bcbeb9e7&quot;</span> <span class="comment">// 16进制</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="✔eth-accounts"><a href="#✔eth-accounts" class="headerlink" title="✔eth_accounts"></a>✔eth_accounts</h3><p>返回客户端持有的地址列表。可用。</p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_accounts&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="❌eth-getBalance"><a href="#❌eth-getBalance" class="headerlink" title="❌eth_getBalance"></a>❌eth_getBalance</h3><p>返回指定地址账户的余额。<strong>不可用。</strong></p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_getBalance&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;0x00000000219ab540356cbb839cbe05303d7705fa&quot;</span>, <span class="comment">// 要检查余额的地址</span></span><br><span class="line">        <span class="string">&quot;latest&quot;</span> <span class="comment">// 整数块编号，或者字符串&quot;latest&quot;、&quot;earliest&quot;、&quot;pending&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: <span class="string">&quot;0x0&quot;</span> <span class="comment">// 无论什么地址始终为0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="❌eth-getStorageAt"><a href="#❌eth-getStorageAt" class="headerlink" title="❌eth_getStorageAt"></a>❌eth_getStorageAt</h3><p>返回指定地址指定存储位置的值。<strong>不可用。</strong></p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_getStorageAt&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;0x091B5Ff4Ec84aEE78Cd586571f81DEA8548938d7&quot;</span>, <span class="comment">// 指定的地址</span></span><br><span class="line">        <span class="string">&quot;0x0&quot;</span>, <span class="comment">// 存储的位置号</span></span><br><span class="line">        <span class="string">&quot;latest&quot;</span> <span class="comment">// 整数块号，或者字符串&quot;latest&quot;、&quot;earliest&quot;、&quot;pending&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: <span class="string">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span> <span class="comment">// 始终为0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="❌eth-getTransactionCount"><a href="#❌eth-getTransactionCount" class="headerlink" title="❌eth_getTransactionCount"></a>❌eth_getTransactionCount</h3><p>返回指定地址发生的交易数量。<strong>不可用。</strong></p><p>请求 #1：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_getTransactionCount&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;0x0F42798dEf01713f2e710669e2182B2d3D4110E3&quot;</span>, <span class="comment">// 地址</span></span><br><span class="line">        <span class="string">&quot;latest&quot;</span> <span class="comment">// 整数块编号，或者字符串&quot;latest&quot;、&quot;earliest&quot;、&quot;pending&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应 #1：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: <span class="string">&quot;0x0&quot;</span> <span class="comment">//若为&quot;latest&quot;，始终为0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求 #2：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_getTransactionCount&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;0x3c29081b8898f1095d1ba0b2e05eacd45fda61bd&quot;</span>,</span><br><span class="line">        <span class="string">&quot;0xD6C9AA&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应 #2：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: <span class="string">&quot;0x0&quot;</span> <span class="comment">//始终为0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="✔eth-getBlockTransactionCountByHash"><a href="#✔eth-getBlockTransactionCountByHash" class="headerlink" title="✔eth_getBlockTransactionCountByHash"></a>✔eth_getBlockTransactionCountByHash</h3><p>返回指定块内的交易数量，使用哈希来指定块。可用。</p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_getBlockTransactionCountByHash&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;0x28c1de373975f51eeaea73ab46bb900ffc9c2b63199eda739b7053ed51720c1a&quot;</span> <span class="comment">// 块哈希</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: <span class="string">&quot;0x65&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="✔eth-getBlockTransactionCountByNumber"><a href="#✔eth-getBlockTransactionCountByNumber" class="headerlink" title="✔eth_getBlockTransactionCountByNumber"></a>✔eth_getBlockTransactionCountByNumber</h3><p>返回指定块内的交易数量，使用块编号指定块。可用。</p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_getBlockTransactionCountByNumber&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;0xD6D85B&quot;</span> <span class="comment">// 16进制的块编号</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: <span class="string">&quot;0xd7&quot;</span> <span class="comment">// 该块内发生的交易</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="✔eth-getUncleCountByBlockHash"><a href="#✔eth-getUncleCountByBlockHash" class="headerlink" title="✔eth_getUncleCountByBlockHash"></a>✔eth_getUncleCountByBlockHash</h3><p>返回指定块的叔伯数量，使用哈希指定块。可用。</p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_getUncleCountByBlockHash&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;0x14f5174e081999db250e08e57c7bbfa7ea502d2016f8ce7a3facb5025715f80c&quot;</span> <span class="comment">// 块哈希</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: <span class="string">&quot;0x0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="✔eth-getUncleCountByBlockNumber"><a href="#✔eth-getUncleCountByBlockNumber" class="headerlink" title="✔eth_getUncleCountByBlockNumber"></a>✔eth_getUncleCountByBlockNumber</h3><p>返回指定块的叔伯数量，使用块编号指定块。可用。</p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_getUncleCountByBlockNumber&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;0xD6D85B&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: <span class="string">&quot;0x0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="❌eth-getCode"><a href="#❌eth-getCode" class="headerlink" title="❌eth_getCode"></a>❌eth_getCode</h3><p>返回指定地址的代码。<strong>不可用。</strong></p><p>请求 #1：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_getCode&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;0x60BB16c4A931b1a0B8A7D945C651DD90f41D42Cf&quot;</span>,</span><br><span class="line">        <span class="string">&quot;0x0&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应 #1：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: <span class="string">&quot;0x&quot;</span> <span class="comment">// 始终为&quot;0x&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求 #2：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_getCode&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;0x60BB16c4A931b1a0B8A7D945C651DD90f41D42Cf&quot;</span>,</span><br><span class="line">        <span class="string">&quot;0x2&quot;</span> <span class="comment">// 非0值</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应 #2：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;error&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;code&quot;</span>: <span class="number">-32000</span>,</span><br><span class="line">        <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;missing trie node 4943d941637411107494da9ec8bc04359d731bfd08b72b4d0edcbd4cd2ecb341 (path )&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="✔eth-sign"><a href="#✔eth-sign" class="headerlink" title="✔eth_sign"></a>✔eth_sign</h3><p>计算以太坊签名。可用。</p><p>签名公式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sign(keccak256(<span class="string">&quot;\x19Ethereum Signed Message:\n&quot;</span> + <span class="built_in">len</span>(message) + message))</span><br></pre></td></tr></table></figure><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_sign&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;0x0F42798dEf01713f2e710669e2182B2d3D4110E3&quot;</span>, <span class="comment">// 地址</span></span><br><span class="line">        <span class="string">&quot;0xdeadbeaf&quot;</span> <span class="comment">// 要签名的消息</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;error&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;code&quot;</span>: <span class="number">-32000</span>,</span><br><span class="line">        <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;unknown account&quot;</span> <span class="comment">// 始终为&quot;unknown account&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="❓eth-sendTransaction"><a href="#❓eth-sendTransaction" class="headerlink" title="❓eth_sendTransaction"></a>❓eth_sendTransaction</h3><p>创建一个新的消息调用交易，如果数据字段中包含代码，则创建一个合约。需要切换至测试网，暂未测试。</p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="❓eth-sendRawTransaction"><a href="#❓eth-sendRawTransaction" class="headerlink" title="❓eth_sendRawTransaction"></a>❓eth_sendRawTransaction</h3><p>为签名交易创建一个新的消息调用交易或合约。暂未测试。</p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="❓eth-call"><a href="#❓eth-call" class="headerlink" title="❓eth_call"></a>❓eth_call</h3><p>立刻执行一个新的消息调用，无需在区块链上创建交易。暂未测试。</p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="❓eth-estimateGas"><a href="#❓eth-estimateGas" class="headerlink" title="❓eth_estimateGas"></a>❓eth_estimateGas</h3><p>执行并估算一个交易需要的gas用量，该次交易不会写入区块链，估算的数值可能比实际用量大的多。暂未测试。</p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="✔eth-getBlockByHash"><a href="#✔eth-getBlockByHash" class="headerlink" title="✔eth_getBlockByHash"></a>✔eth_getBlockByHash</h3><p>返回使用哈希指定的块中的交易信息。可用。</p><p>请求 #1：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_getBlockByHash&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;0x28c1de373975f51eeaea73ab46bb900ffc9c2b63199eda739b7053ed51720c1a&quot;</span>, <span class="comment">// 块哈希</span></span><br><span class="line">        <span class="literal">false</span> <span class="comment">// 仅返回交易哈希</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应 #1：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;baseFeePerGas&quot;</span>: <span class="string">&quot;0x2e7dbfbd45&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;difficulty&quot;</span>: <span class="string">&quot;0x2a938acf800899&quot;</span>, <span class="comment">// 块难度</span></span><br><span class="line">        <span class="attr">&quot;extraData&quot;</span>: <span class="string">&quot;0xe4b883e5bda9e7a59ee4bb99e9b1bc4a1421&quot;</span>, <span class="comment">// 块额外数据</span></span><br><span class="line">        <span class="attr">&quot;gasLimit&quot;</span>: <span class="string">&quot;0x1c9509e&quot;</span>, <span class="comment">// 本块允许的最大gas用量</span></span><br><span class="line">        <span class="attr">&quot;gasUsed&quot;</span>: <span class="string">&quot;0x742d2c&quot;</span>, <span class="comment">// 本块中所有交易使用的总gas用量</span></span><br><span class="line">        <span class="attr">&quot;hash&quot;</span>: <span class="string">&quot;0x28c1de373975f51eeaea73ab46bb900ffc9c2b63199eda739b7053ed51720c1a&quot;</span>, <span class="comment">// 块哈希，挂起块为null</span></span><br><span class="line">        <span class="attr">&quot;logsBloom&quot;</span>: <span class="string">&quot;0x812....40a1&quot;</span>, <span class="comment">// 快日志的bloom过滤器，挂起块为null</span></span><br><span class="line">        <span class="attr">&quot;miner&quot;</span>: <span class="string">&quot;0x829bd824b016326a401d083b33d092293333a830&quot;</span>, <span class="comment">//  挖矿奖励的接收账户</span></span><br><span class="line">        <span class="attr">&quot;mixHash&quot;</span>: <span class="string">&quot;0xf1e75a3be84b59080b0db836a3c739576b8f08cb499adfc6ccfff484236504dd&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;nonce&quot;</span>: <span class="string">&quot;0x0000c91c35389817&quot;</span>, <span class="comment">// 生成的pow哈希，挂起块为null</span></span><br><span class="line">        <span class="attr">&quot;number&quot;</span>: <span class="string">&quot;0xd6c9aa&quot;</span>, <span class="comment">// 块编号，挂起块为null</span></span><br><span class="line">        <span class="attr">&quot;parentHash&quot;</span>: <span class="string">&quot;0x093ff6c4ea93d0fe104f573718c30b0fdf1eca20e7649d324bb52b40ccc0fe11&quot;</span>, <span class="comment">// 父块的哈希</span></span><br><span class="line">        <span class="attr">&quot;receiptsRoot&quot;</span>: <span class="string">&quot;0x1f2463476fcbcee92c2fef2def36da9c77fffe6d7445a63c1882322e2b6b0922&quot;</span>,  <span class="comment">// 块交易收据树的根节点</span></span><br><span class="line">        <span class="attr">&quot;sha3Uncles&quot;</span>: <span class="string">&quot;0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347&quot;</span>, <span class="comment">// 块中叔伯数据的SHA3哈希</span></span><br><span class="line">        <span class="attr">&quot;size&quot;</span>: <span class="string">&quot;0xa205&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;stateRoot&quot;</span>: <span class="string">&quot;0x5aa4eb405fbde30d601519d3e1b41bc238b24ccc87d9a5ed492e29cc712344b0&quot;</span>, <span class="comment">// 块最终状态树的根节点</span></span><br><span class="line">        <span class="attr">&quot;timestamp&quot;</span>: <span class="string">&quot;0x61f040be&quot;</span>, <span class="comment">// 块时间戳</span></span><br><span class="line">        <span class="attr">&quot;totalDifficulty&quot;</span>: <span class="string">&quot;0x86fab69939731be5b81&quot;</span>,  <span class="comment">// 截止到本块的链上总难度</span></span><br><span class="line">        <span class="attr">&quot;transactions&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;0x0f4f3fa3bc04b53feaf6a12d0112cf33a2449727d35f4d5b1fb7541fe3c896e4&quot;</span>,</span><br><span class="line">            <span class="string">&quot;0xa161c7f5daefaa211f1eefd3b6862f99b3d176e057b64abc69d8b20d8ed925f8&quot;</span>,</span><br><span class="line">            ......,</span><br><span class="line">            <span class="string">&quot;0x8e373a16fab08652607273427925f0dac5730896761010a963eef623816c14e1&quot;</span></span><br><span class="line">        ], <span class="comment">// 交易哈希数组</span></span><br><span class="line">        <span class="attr">&quot;transactionsRoot&quot;</span>: <span class="string">&quot;0x8cfd6631ebde34f2b39fdc7b281c305790925b4aae0c09179285109c1474f886&quot;</span>, <span class="comment">// 块中的交易树根节点</span></span><br><span class="line">        <span class="attr">&quot;uncles&quot;</span>: [] <span class="comment">// 叔伯哈希数组</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求 #2：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_getBlockByHash&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;0x28c1de373975f51eeaea73ab46bb900ffc9c2b63199eda739b7053ed51720c1a&quot;</span>,</span><br><span class="line">        <span class="literal">true</span> <span class="comment">// 返回完整的交易对象</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应 #2：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;baseFeePerGas&quot;</span>: <span class="string">&quot;0x2e7dbfbd45&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;difficulty&quot;</span>: <span class="string">&quot;0x2a938acf800899&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;extraData&quot;</span>: <span class="string">&quot;0xe4b883e5bda9e7a59ee4bb99e9b1bc4a1421&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;gasLimit&quot;</span>: <span class="string">&quot;0x1c9509e&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;gasUsed&quot;</span>: <span class="string">&quot;0x742d2c&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;hash&quot;</span>: <span class="string">&quot;0x28c1de373975f51eeaea73ab46bb900ffc9c2b63199eda739b7053ed51720c1a&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;logsBloom&quot;</span>: <span class="string">&quot;0x8128218....4240a1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;miner&quot;</span>: <span class="string">&quot;0x829bd824b016326a401d083b33d092293333a830&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;mixHash&quot;</span>: <span class="string">&quot;0xf1e75a3be84b59080b0db836a3c739576b8f08cb499adfc6ccfff484236504dd&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;nonce&quot;</span>: <span class="string">&quot;0x0000c91c35389817&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;number&quot;</span>: <span class="string">&quot;0xd6c9aa&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;parentHash&quot;</span>: <span class="string">&quot;0x093ff6c4ea93d0fe104f573718c30b0fdf1eca20e7649d324bb52b40ccc0fe11&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;receiptsRoot&quot;</span>: <span class="string">&quot;0x1f2463476fcbcee92c2fef2def36da9c77fffe6d7445a63c1882322e2b6b0922&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;sha3Uncles&quot;</span>: <span class="string">&quot;0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;size&quot;</span>: <span class="string">&quot;0xa205&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;stateRoot&quot;</span>: <span class="string">&quot;0x5aa4eb405fbde30d601519d3e1b41bc238b24ccc87d9a5ed492e29cc712344b0&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;timestamp&quot;</span>: <span class="string">&quot;0x61f040be&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;totalDifficulty&quot;</span>: <span class="string">&quot;0x86fab69939731be5b81&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;transactions&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;accessList&quot;</span>: [],</span><br><span class="line">                <span class="attr">&quot;blockHash&quot;</span>: <span class="string">&quot;0x28c1de373975f51eeaea73ab46bb900ffc9c2b63199eda739b7053ed51720c1a&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;blockNumber&quot;</span>: <span class="string">&quot;0xd6c9aa&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;chainId&quot;</span>: <span class="string">&quot;0x1&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;from&quot;</span>: <span class="string">&quot;0x3c29081b8898f1095d1ba0b2e05eacd45fda61bd&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;gas&quot;</span>: <span class="string">&quot;0x8c746&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;gasPrice&quot;</span>: <span class="string">&quot;0x30969e0d37&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;hash&quot;</span>: <span class="string">&quot;0x0f4f3fa3bc04b53feaf6a12d0112cf33a2449727d35f4d5b1fb7541fe3c896e4&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;input&quot;</span>: <span class="string">&quot;0xa0050....b43d&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;maxFeePerGas&quot;</span>: <span class="string">&quot;0x310da2876d&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;maxPriorityFeePerGas&quot;</span>: <span class="string">&quot;0x218de4ff2&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;nonce&quot;</span>: <span class="string">&quot;0xa1&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;r&quot;</span>: <span class="string">&quot;0xba242a077779245b4e5ea0692c3aa64fb8304602b80634c4dd51b1ac94d32322&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;s&quot;</span>: <span class="string">&quot;0x617828cfb4ed14373643aeae1ba9adde0d5294e65a7549d9ecc87f351ecdf8a7&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;to&quot;</span>: <span class="string">&quot;0xa10fca31a2cb432c9ac976779dc947cfdb003ef0&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;transactionIndex&quot;</span>: <span class="string">&quot;0x0&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;0x2&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;v&quot;</span>: <span class="string">&quot;0x0&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;0x0&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            ......</span><br><span class="line">        ], <span class="comment">// 交易数组，含义可参考 eth_getTransactionByHash</span></span><br><span class="line">        <span class="attr">&quot;transactionsRoot&quot;</span>: <span class="string">&quot;0x8cfd6631ebde34f2b39fdc7b281c305790925b4aae0c09179285109c1474f886&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;uncles&quot;</span>: []</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="✔eth-getBlockByNumber"><a href="#✔eth-getBlockByNumber" class="headerlink" title="✔eth_getBlockByNumber"></a>✔eth_getBlockByNumber</h3><p>返回指定编号的块。可用。</p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_getBlockByNumber&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;0xD6C9AA&quot;</span>, <span class="comment">// 指定块的编号</span></span><br><span class="line">        <span class="literal">false</span> <span class="comment">// 返回完整的交易对象或仅返回交易哈希</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><p>同 <a href="#eth_getBlockByHash">eth_getBlockByHash</a></p><h3 id="✔eth-getTransactionByHash"><a href="#✔eth-getTransactionByHash" class="headerlink" title="✔eth_getTransactionByHash"></a>✔eth_getTransactionByHash</h3><p>返回指定哈希对应的交易。可用。</p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_getTransactionByHash&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;0x0f4f3fa3bc04b53feaf6a12d0112cf33a2449727d35f4d5b1fb7541fe3c896e4&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;accessList&quot;</span>: [],</span><br><span class="line">        <span class="attr">&quot;blockHash&quot;</span>: <span class="string">&quot;0x28c1de373975f51eeaea73ab46bb900ffc9c2b63199eda739b7053ed51720c1a&quot;</span>, <span class="comment">// 交易所在块的哈希，挂起块为null</span></span><br><span class="line">        <span class="attr">&quot;blockNumber&quot;</span>: <span class="string">&quot;0xd6c9aa&quot;</span>, <span class="comment">// 交易所在块的编号，挂起块为null</span></span><br><span class="line">        <span class="attr">&quot;chainId&quot;</span>: <span class="string">&quot;0x1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;from&quot;</span>: <span class="string">&quot;0x3c29081b8898f1095d1ba0b2e05eacd45fda61bd&quot;</span>, <span class="comment">// 交易发送方地址</span></span><br><span class="line">        <span class="attr">&quot;gas&quot;</span>: <span class="string">&quot;0x8c746&quot;</span>, <span class="comment">// 发送方提供的gas可用量</span></span><br><span class="line">        <span class="attr">&quot;gasPrice&quot;</span>: <span class="string">&quot;0x30969e0d37&quot;</span>, <span class="comment">// 发送方提供的gas价格</span></span><br><span class="line">        <span class="attr">&quot;hash&quot;</span>: <span class="string">&quot;0x0f4f3fa3bc04b53feaf6a12d0112cf33a2449727d35f4d5b1fb7541fe3c896e4&quot;</span>, <span class="comment">// 交易哈希</span></span><br><span class="line">        <span class="attr">&quot;input&quot;</span>: <span class="string">&quot;0xa0050....5b43d&quot;</span>, <span class="comment">// 随交易发送的数据</span></span><br><span class="line">        <span class="attr">&quot;maxFeePerGas&quot;</span>: <span class="string">&quot;0x310da2876d&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;maxPriorityFeePerGas&quot;</span>: <span class="string">&quot;0x218de4ff2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;nonce&quot;</span>: <span class="string">&quot;0xa1&quot;</span>, <span class="comment">// 本次交易之前发送方已经生成的交易数量</span></span><br><span class="line">        <span class="attr">&quot;r&quot;</span>: <span class="string">&quot;0xba242a077779245b4e5ea0692c3aa64fb8304602b80634c4dd51b1ac94d32322&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;s&quot;</span>: <span class="string">&quot;0x617828cfb4ed14373643aeae1ba9adde0d5294e65a7549d9ecc87f351ecdf8a7&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;to&quot;</span>: <span class="string">&quot;0xa10fca31a2cb432c9ac976779dc947cfdb003ef0&quot;</span>, <span class="comment">// 交易接收方地址</span></span><br><span class="line">        <span class="attr">&quot;transactionIndex&quot;</span>: <span class="string">&quot;0x0&quot;</span>, <span class="comment">// 交易在块中的索引位置，挂起块为null</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;0x2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;v&quot;</span>: <span class="string">&quot;0x0&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;0x0&quot;</span> <span class="comment">// 发送的以太数量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="✔eth-getTransactionByBlockHashAndIndex"><a href="#✔eth-getTransactionByBlockHashAndIndex" class="headerlink" title="✔eth_getTransactionByBlockHashAndIndex"></a>✔eth_getTransactionByBlockHashAndIndex</h3><p>返回指定哈希的块内指定索引序号的交易。可用。</p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_getTransactionByBlockHashAndIndex&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;0x28c1de373975f51eeaea73ab46bb900ffc9c2b63199eda739b7053ed51720c1a&quot;</span>,</span><br><span class="line">        <span class="string">&quot;0x0&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><p>同 <a href="#eth_getBlockByHash">eth_getBlockByHash</a></p><h3 id="✔eth-getTransactionByBlockNumberAndIndex"><a href="#✔eth-getTransactionByBlockNumberAndIndex" class="headerlink" title="✔eth_getTransactionByBlockNumberAndIndex"></a>✔eth_getTransactionByBlockNumberAndIndex</h3><p>返回指定编号的块内指定索引序号的交易。可用。</p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_getTransactionByBlockNumberAndIndex&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;0xD6C9AA&quot;</span>,</span><br><span class="line">        <span class="string">&quot;0x0&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><p>同 <a href="#eth_getBlockByHash">eth_getBlockByHash</a></p><h3 id="✔eth-getTransactionReceipt"><a href="#✔eth-getTransactionReceipt" class="headerlink" title="✔eth_getTransactionReceipt"></a>✔eth_getTransactionReceipt</h3><p>返回指定哈希的交易的收据，挂起的交易其收据无效。可用。</p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_getTransactionReceipt&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;0x0f4f3fa3bc04b53feaf6a12d0112cf33a2449727d35f4d5b1fb7541fe3c896e4&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;blockHash&quot;</span>: <span class="string">&quot;0x28c1de373975f51eeaea73ab46bb900ffc9c2b63199eda739b7053ed51720c1a&quot;</span>, <span class="comment">// 交易所在块的哈希</span></span><br><span class="line">        <span class="attr">&quot;blockNumber&quot;</span>: <span class="string">&quot;0xd6c9aa&quot;</span>, <span class="comment">// 交易所在块的编号</span></span><br><span class="line">        <span class="attr">&quot;contractAddress&quot;</span>: <span class="literal">null</span>, <span class="comment">// 对于合约创建交易，该值为新创建的合约地址，否则为null</span></span><br><span class="line">        <span class="attr">&quot;cumulativeGasUsed&quot;</span>: <span class="string">&quot;0x68fbd&quot;</span>, <span class="comment">// 交易所在块消耗的gas总量</span></span><br><span class="line">        <span class="attr">&quot;effectiveGasPrice&quot;</span>: <span class="string">&quot;0x30969e0d37&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;from&quot;</span>: <span class="string">&quot;0x3c29081b8898f1095d1ba0b2e05eacd45fda61bd&quot;</span>, <span class="comment">// 交易发送方地址</span></span><br><span class="line">        <span class="attr">&quot;gasUsed&quot;</span>: <span class="string">&quot;0x68fbd&quot;</span>, <span class="comment">// 该次交易消耗的gas用量</span></span><br><span class="line">        <span class="attr">&quot;logs&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;address&quot;</span>: <span class="string">&quot;0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;blockHash&quot;</span>: <span class="string">&quot;0x28c1de373975f51eeaea73ab46bb900ffc9c2b63199eda739b7053ed51720c1a&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;blockNumber&quot;</span>: <span class="string">&quot;0xd6c9aa&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;data&quot;</span>: <span class="string">&quot;0x0000000000000000000000000000000000000000000000000000000b7a3400e3&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;logIndex&quot;</span>: <span class="string">&quot;0x0&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;removed&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">&quot;topics&quot;</span>: [</span><br><span class="line">                    <span class="string">&quot;0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;0x00000000000000000000000088e6a0c2ddd26feeb64f039a2c41296fcb3f5640&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;0x000000000000000000000000a10fca31a2cb432c9ac976779dc947cfdb003ef0&quot;</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">&quot;transactionHash&quot;</span>: <span class="string">&quot;0x0f4f3fa3bc04b53feaf6a12d0112cf33a2449727d35f4d5b1fb7541fe3c896e4&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;transactionIndex&quot;</span>: <span class="string">&quot;0x0&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">        ], <span class="comment">// 本次交易生成的日志对象数组</span></span><br><span class="line">        <span class="attr">&quot;logsBloom&quot;</span>: <span class="string">&quot;0x0000....4080&quot;</span>, <span class="comment">// bloom过滤器，便于轻节点快速提取相关日志</span></span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;0x1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;to&quot;</span>: <span class="string">&quot;0xa10fca31a2cb432c9ac976779dc947cfdb003ef0&quot;</span>, <span class="comment">// 交易接收方地址，对于合约创建交易该值为null</span></span><br><span class="line">        <span class="attr">&quot;transactionHash&quot;</span>: <span class="string">&quot;0x0f4f3fa3bc04b53feaf6a12d0112cf33a2449727d35f4d5b1fb7541fe3c896e4&quot;</span>, <span class="comment">// 交易哈希</span></span><br><span class="line">        <span class="attr">&quot;transactionIndex&quot;</span>: <span class="string">&quot;0x0&quot;</span>, <span class="comment">// 交易在块内的索引序号</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;0x2&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="✔eth-getUncleByBlockHashAndIndex"><a href="#✔eth-getUncleByBlockHashAndIndex" class="headerlink" title="✔eth_getUncleByBlockHashAndIndex"></a>✔eth_getUncleByBlockHashAndIndex</h3><p>返回指定哈希的块指定索引位置的叔伯。可用。</p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_getUncleByBlockHashAndIndex&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;0x0f4f3fa3bc04b53feaf6a12d0112cf33a2449727d35f4d5b1fb7541fe3c896e4&quot;</span>,</span><br><span class="line">        <span class="string">&quot;0x0&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="✔eth-getUncleByBlockNumberAndIndex"><a href="#✔eth-getUncleByBlockNumberAndIndex" class="headerlink" title="✔eth_getUncleByBlockNumberAndIndex"></a>✔eth_getUncleByBlockNumberAndIndex</h3><p>返回指定编号的块内指定索引序号的叔伯。可用。</p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_getUncleByBlockNumberAndIndex&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;0xD6C9AA&quot;</span>,</span><br><span class="line">        <span class="string">&quot;0x0&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="❌eth-getCompilers"><a href="#❌eth-getCompilers" class="headerlink" title="❌eth_getCompilers"></a>❌eth_getCompilers</h3><p>返回客户端中有效的编译器列表。<strong>不可用。</strong></p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_getCompilers&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;error&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;code&quot;</span>: <span class="number">-32601</span>,</span><br><span class="line">        <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;the method eth_getCompilers does not exist/is not available&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="❌eth-compileSolidity"><a href="#❌eth-compileSolidity" class="headerlink" title="❌eth_compileSolidity"></a>❌eth_compileSolidity</h3><p>返回编译后的solidity代码。<strong>不可用。</strong></p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_compileSolidity&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;contract test &#123; function multiply(uint a) returns(uint d) &#123; return a * 7; &#125; &#125;&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;error&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;code&quot;</span>: <span class="number">-32601</span>,</span><br><span class="line">        <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;the method eth_compileSolidity does not exist/is not available&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="❌eth-compileLLL"><a href="#❌eth-compileLLL" class="headerlink" title="❌eth_compileLLL"></a>❌eth_compileLLL</h3><p>返回编译后的LLL代码。<strong>不可用。</strong></p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_compileLLL&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;(returnlll (suicide (caller)))&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;error&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;code&quot;</span>: <span class="number">-32601</span>,</span><br><span class="line">        <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;the method eth_compileLLL does not exist/is not available&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="❌eth-compileSerpent"><a href="#❌eth-compileSerpent" class="headerlink" title="❌eth_compileSerpent"></a>❌eth_compileSerpent</h3><p>返回编译后的Serpent代码。<strong>不可用。</strong></p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_compileSerpent&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;/* some serpent */&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;error&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;code&quot;</span>: <span class="number">-32601</span>,</span><br><span class="line">        <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;the method eth_compileSerpent does not exist/is not available&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="✔eth-newFilter"><a href="#✔eth-newFilter" class="headerlink" title="✔eth_newFilter"></a>✔eth_newFilter</h3><p>基于给定的选项创建一个过滤器对象，接收状态变化时的通知。可用。</p><p>假定一个交易的主题为<code>[A, B]</code>，该主题会被以下过滤器匹配：</p><ul><li><code>[]</code> 任何主题</li><li><code>[A]</code> 第一个主题为A，第二个主题不限</li><li><code>[null, B]</code> 第一个主题不限，第二个主题为B</li><li><code>[A, B]</code> 第一个主题为A，第二个主题为B</li><li><code>[[A, B], [B, C]]</code> 第一个主题为A或B，第二个主题为B或C</li></ul><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_newFilter&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;fromBlock&quot;</span>: <span class="string">&quot;0xd6c9aa&quot;</span>, <span class="comment">// 整数块编号或者&quot;latest&quot;、&quot;pending&quot;、&quot;earliest&quot;，可选，默认值&quot;latest&quot;。</span></span><br><span class="line">            <span class="attr">&quot;toBlock&quot;</span>: <span class="string">&quot;0xd6c9ab&quot;</span>, <span class="comment">// 整数块编号或者&quot;latest&quot;、&quot;pending&quot;、&quot;earliest&quot;，可选，默认值&quot;latest&quot;。</span></span><br><span class="line">            <span class="comment">//&quot;address&quot;: 合约地址或生成日志的一组地址，可选</span></span><br><span class="line">            <span class="attr">&quot;topics&quot;</span>: [] <span class="comment">// 主题数组，可选</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: <span class="string">&quot;0xffe210b5c962996a6664dc1ebc9eb05b&quot;</span> <span class="comment">// 过滤器编号</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="❌eth-newBlockFilter"><a href="#❌eth-newBlockFilter" class="headerlink" title="❌eth_newBlockFilter"></a>❌eth_newBlockFilter</h3><p>创建过滤器，当新块生成时进行通知。<strong>不可用。</strong></p><p>可以成功创建过滤器，但由于可能尚未跟上主网的出块速度，查询过滤器无法得到日志。</p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_newBlockFilter&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: <span class="string">&quot;0xbeb626deabcdf93d2167cdb27ad6d230&quot;</span> <span class="comment">// 过滤器编号</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="❌eth-newPendingTransactionFilter"><a href="#❌eth-newPendingTransactionFilter" class="headerlink" title="❌eth_newPendingTransactionFilter"></a>❌eth_newPendingTransactionFilter</h3><p>创建过滤器，当产生挂起交易时进行通知。 <strong>不可用。</strong></p><p>可以成功创建过滤器，但查询过滤器无法得到日志。</p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_newPendingTransactionFilter&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: <span class="string">&quot;0xb7303ea3aeab1d706126ecaac9dcfc25&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="✔eth-uninstallFilter"><a href="#✔eth-uninstallFilter" class="headerlink" title="✔eth_uninstallFilter"></a>✔eth_uninstallFilter</h3><p>卸载指定编号的过滤器。可用。</p><p>注意，过滤器在一定时间内若未接收到<code>eth_getFilterChanges</code>调用，则会自动超时。</p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_uninstallFilter&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;0x5c005232da23c8f5705623c81d415989&quot;</span> <span class="comment">// 过滤器编号</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: <span class="literal">true</span> <span class="comment">// 是否成功卸载</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="✔eth-getFilterChanges"><a href="#✔eth-getFilterChanges" class="headerlink" title="✔eth_getFilterChanges"></a>✔eth_getFilterChanges</h3><p>查询指定的过滤器，返回自上次查询之后新生成的日志数组。可用。</p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_getFilterChanges&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;0xffe210b5c962996a6664dc1ebc9eb05b&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="✔eth-getFilterLogs"><a href="#✔eth-getFilterLogs" class="headerlink" title="✔eth_getFilterLogs"></a>✔eth_getFilterLogs</h3><p>返回指定编号过滤器中的全部日志。可用。</p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_getFilterLogs&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;0xffe210b5c962996a6664dc1ebc9eb05b&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;address&quot;</span>: <span class="string">&quot;0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;blockHash&quot;</span>: <span class="string">&quot;0x28c1de373975f51eeaea73ab46bb900ffc9c2b63199eda739b7053ed51720c1a&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;blockNumber&quot;</span>: <span class="string">&quot;0xd6c9aa&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;data&quot;</span>: <span class="string">&quot;0x0000000000000000000000000000000000000000000000000000000b7a3400e3&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;logIndex&quot;</span>: <span class="string">&quot;0x0&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;removed&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;topics&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&quot;</span>,</span><br><span class="line">                <span class="string">&quot;0x00000000000000000000000088e6a0c2ddd26feeb64f039a2c41296fcb3f5640&quot;</span>,</span><br><span class="line">                <span class="string">&quot;0x000000000000000000000000a10fca31a2cb432c9ac976779dc947cfdb003ef0&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;transactionHash&quot;</span>: <span class="string">&quot;0x0f4f3fa3bc04b53feaf6a12d0112cf33a2449727d35f4d5b1fb7541fe3c896e4&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;transactionIndex&quot;</span>: <span class="string">&quot;0x0&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        ......</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="✔eth-getLogs"><a href="#✔eth-getLogs" class="headerlink" title="✔eth_getLogs"></a>✔eth_getLogs</h3><p>返回匿名过滤器中的所有日志。可用。</p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_getLogs&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;fromBlock&quot;</span>: <span class="string">&quot;0xd6c9aa&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;toBlock&quot;</span>: <span class="string">&quot;0xd6c9ab&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;topics&quot;</span>: []</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><p>同 <a href="#eth_getFilterLogs">eth_getFilterLogs</a></p><h3 id="❌-eth-getWork"><a href="#❌-eth-getWork" class="headerlink" title="❌   eth_getWork"></a>❌   eth_getWork</h3><p>返回当前块的哈希、种子哈希、以及要满足的边界条件，即目标。<strong>不可用。</strong></p><p>可能是因为节点并不在挖矿。</p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_getWork&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;error&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;code&quot;</span>: <span class="number">-32000</span>,</span><br><span class="line">        <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;no mining work available yet&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="❓eth-submitWork"><a href="#❓eth-submitWork" class="headerlink" title="❓eth_submitWork"></a>❓eth_submitWork</h3><p>用于提交POW解决方案。暂未测试。</p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="❓eth-submitHashrate"><a href="#❓eth-submitHashrate" class="headerlink" title="❓eth_submitHashrate"></a>❓eth_submitHashrate</h3><p>用于提交挖矿的哈希速率。暂未测试。</p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="❌eth-blockNumber"><a href="#❌eth-blockNumber" class="headerlink" title="❌eth_blockNumber"></a>❌eth_blockNumber</h3><p>返回最新块的编号。<strong>不可用。</strong></p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;eth_blockNumber&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>: <span class="string">&quot;0x0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="db"><a href="#db" class="headerlink" title="db"></a>db</h2><p>数据库相关操作。<strong>均已被废弃。</strong></p><h3 id="❌db-putString"><a href="#❌db-putString" class="headerlink" title="❌db_putString"></a>❌db_putString</h3><p>在本地数据库中存入字符串。<strong>已被废弃。</strong></p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;db_putString&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;testDB&quot;</span>,</span><br><span class="line">        <span class="string">&quot;myKey&quot;</span>,</span><br><span class="line">        <span class="string">&quot;myString&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;error&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;code&quot;</span>: <span class="number">-32601</span>,</span><br><span class="line">        <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;the method db_putString does not exist/is not available&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="❌db-getString"><a href="#❌db-getString" class="headerlink" title="❌db_getString"></a>❌db_getString</h3><p>从本地数据库读取字符串。<strong>已被废弃。</strong></p><h3 id="❌db-putHex"><a href="#❌db-putHex" class="headerlink" title="❌db_putHex"></a>❌db_putHex</h3><p>将二进制数据写入本地数据库。<strong>已被废弃。</strong></p><h3 id="❌db-getHex"><a href="#❌db-getHex" class="headerlink" title="❌db_getHex"></a>❌db_getHex</h3><p>从本地数据库中读取二进制数据。<strong>已被废弃。</strong></p><h2 id="shh"><a href="#shh" class="headerlink" title="shh"></a>shh</h2><p><a href="https://eth.wiki/concepts/whisper/whisper">Whisper协议</a> 相关。<strong>均不可用。</strong></p><h3 id="❌shh-version"><a href="#❌shh-version" class="headerlink" title="❌shh_version"></a>❌shh_version</h3><p>返回当前的whisper协议版本。<strong>不可用。</strong></p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;shh_version&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;error&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;code&quot;</span>: <span class="number">-32601</span>,</span><br><span class="line">        <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;the method shh_version does not exist/is not available&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="❌shh-post"><a href="#❌shh-post" class="headerlink" title="❌shh_post"></a>❌shh_post</h3><p>发送whisper消息。<strong>不可用。</strong></p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;shh_post&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;payload&quot;</span>: <span class="string">&quot;0x7b2274797065223a226d6&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;priority&quot;</span>: <span class="string">&quot;0x64&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;topics&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;0x776869737065722d636861742d636c69656e74&quot;</span>,</span><br><span class="line">                <span class="string">&quot;0x4d5a695276454c39425154466b61693532&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;ttl&quot;</span>: <span class="string">&quot;0x64&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;error&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;code&quot;</span>: <span class="number">-32601</span>,</span><br><span class="line">        <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;the method shh_post does not exist/is not available&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="❌shh-newIdentity"><a href="#❌shh-newIdentity" class="headerlink" title="❌shh_newIdentity"></a>❌shh_newIdentity</h3><p>在客户端创建一个新的whisper身份标识。<strong>不可用。</strong></p><p>请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;shh_newIdentity&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;error&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;code&quot;</span>: <span class="number">-32601</span>,</span><br><span class="line">        <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;the method shh_newIdentity does not exist/is not available&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="❌shh-hasIdentity"><a href="#❌shh-hasIdentity" class="headerlink" title="❌shh_hasIdentity"></a>❌shh_hasIdentity</h3><p>检查客户端是否持有指定身份标识的私钥。<strong>不可用。</strong></p><h3 id="❌shh-newGroup"><a href="#❌shh-newGroup" class="headerlink" title="❌shh_newGroup"></a>❌shh_newGroup</h3><p>创建分组。<strong>不可用。</strong></p><h3 id="❌shh-addToGroup"><a href="#❌shh-addToGroup" class="headerlink" title="❌shh_addToGroup"></a>❌shh_addToGroup</h3><p>将指定身份标识加入分组。 <strong>不可用。</strong></p><h3 id="❌shh-newFilter"><a href="#❌shh-newFilter" class="headerlink" title="❌shh_newFilter"></a>❌shh_newFilter</h3><p>创建一个过滤器，以便在客户端接收到匹配的whisper消息时进行通知。 <strong>不可用。</strong></p><h3 id="❌shh-uninstallFilter"><a href="#❌shh-uninstallFilter" class="headerlink" title="❌shh_uninstallFilter"></a>❌shh_uninstallFilter</h3><p>卸载指定编号的过滤器 <strong>不可用。</strong></p><h3 id="❌shh-getFilterChanges"><a href="#❌shh-getFilterChanges" class="headerlink" title="❌shh_getFilterChanges"></a>❌shh_getFilterChanges</h3><p>询问Whisper过滤器，返回自上次询问后的新消息。 <strong>不可用。</strong></p><h3 id="❌shh-getMessages"><a href="#❌shh-getMessages" class="headerlink" title="❌shh_getMessages"></a>❌shh_getMessages</h3><p>读取指定过滤器的所有消息。 <strong>不可用。</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Geth客户端共有三种同步模式：”snap”, “full” 和 “light”，默认是snap（前身为fast），本篇文章探究snap模式下可用的RPC接口。&lt;/p&gt;</summary>
    
    
    
    <category term="区块链" scheme="http://miaoguoge.xyz/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
    <category term="ETH" scheme="http://miaoguoge.xyz/tags/ETH/"/>
    
  </entry>
  
  <entry>
    <title>永续合约学习笔记</title>
    <link href="http://miaoguoge.xyz/perpetual-contract-note/"/>
    <id>http://miaoguoge.xyz/perpetual-contract-note/</id>
    <published>2022-01-24T05:27:01.000Z</published>
    <updated>2022-03-05T12:57:31.052Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-术语"><a href="#1-术语" class="headerlink" title="1. 术语"></a>1. 术语</h3><ul><li>杠杆：用户可以通过杠杆持有超过其本金价值的合约；</li><li>做多：买入期货，等上涨后再卖出；</li><li>做空：（借入后）卖出资产，等下跌后再买入（并归还）；</li><li>对冲：当交易商手里的资产风险较高时，可以通过做空风险资产，减少风险暴露；</li></ul><h3 id="2-期货交易过程"><a href="#2-期货交易过程" class="headerlink" title="2. 期货交易过程"></a>2. 期货交易过程</h3><span id="more"></span><p>建仓&#x2F;开仓、持仓、平仓或实物交割。</p><ul><li>建仓：指交易者新买入或新卖出一定数量的期货合约；</li><li>持仓：即持有建仓之后尚没有平仓的合约；</li><li>平仓：指期货买卖的一方在最后交易日结束之前为对销以前买进或卖出的期货合约而进行的成交行为，这样就解除了到期进行实物交割的义务；</li><li>斩仓&#x2F;砍仓：指仓位持有者以外的第三人（期货交易所等）强行了结仓位持有者的仓位；</li><li>初始保证金：用户开仓时所需的最小保证金；</li><li>维持保证金：用户持有相应仓位所需的最小保证金，若余额小于维持保证金，就会被强行平仓；</li></ul><h3 id="2-永续合约"><a href="#2-永续合约" class="headerlink" title="2. 永续合约"></a>2. 永续合约</h3><p>即没有到期日的期货合约。</p><p>在永续合约的交易中，用户可以一直持有合约直到平仓。并且有相应机制通过现货价格指数保证永续合约的价格不会偏离现货价格太多。</p><h4 id="资金费率"><a href="#资金费率" class="headerlink" title="资金费率"></a>资金费率</h4><p>资金费率是在多空持仓双方之间进行支付，如果资金费率为正，多方支付空方，如果资金费率为负，则空方支付多方。</p><p>资金费率由两部分组成：利率水平和溢价水平。溢价是指永续合约价格和依据现货价格指数计算的合理价格之间的差值。当合约过度溢价的时候，资金费率为正，多方需要支付资金费率给空方，这一机制将促使多方进行平仓，进而促使价格向合理水平进行回归。</p><h4 id="标记价格"><a href="#标记价格" class="headerlink" title="标记价格"></a>标记价格</h4><p>标记价格是对永续合约合理价格的估计。</p><p>标记价格的主要作用是计算未实现盈亏，并以此作为强行平仓的依据。这样可以避免由于永续合约市场剧烈波动导致的不必要的强行平仓。标记价格的计算以现货指数价格为基础，再加上由资金费率计算出的合理价差而得出。</p><h4 id="保障基金"><a href="#保障基金" class="headerlink" title="保障基金"></a>保障基金</h4><p>作用：弥补破产用户穿仓导致的亏损，以确保盈利用户不受影响；</p><p>来源：强行平仓收取的额外费用；</p><h4 id="自动减仓"><a href="#自动减仓" class="headerlink" title="自动减仓"></a>自动减仓</h4><p>在风险保障基金失效时发生，以盈利用户的利润，弥补穿仓用户造成的亏损；</p><p>以最高杠杆获得最高利润的用户将会被选择进行自动减仓</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;1-术语&quot;&gt;&lt;a href=&quot;#1-术语&quot; class=&quot;headerlink&quot; title=&quot;1. 术语&quot;&gt;&lt;/a&gt;1. 术语&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;杠杆：用户可以通过杠杆持有超过其本金价值的合约；&lt;/li&gt;
&lt;li&gt;做多：买入期货，等上涨后再卖出；&lt;/li&gt;
&lt;li&gt;做空：（借入后）卖出资产，等下跌后再买入（并归还）；&lt;/li&gt;
&lt;li&gt;对冲：当交易商手里的资产风险较高时，可以通过做空风险资产，减少风险暴露；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-期货交易过程&quot;&gt;&lt;a href=&quot;#2-期货交易过程&quot; class=&quot;headerlink&quot; title=&quot;2. 期货交易过程&quot;&gt;&lt;/a&gt;2. 期货交易过程&lt;/h3&gt;</summary>
    
    
    
    <category term="区块链" scheme="http://miaoguoge.xyz/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
    <category term="合约" scheme="http://miaoguoge.xyz/tags/%E5%90%88%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>代理小问题汇总</title>
    <link href="http://miaoguoge.xyz/proxy-minor-problems/"/>
    <id>http://miaoguoge.xyz/proxy-minor-problems/</id>
    <published>2022-01-22T13:06:13.000Z</published>
    <updated>2022-03-06T07:06:14.922Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Python-requests库报SSLError"><a href="#1-Python-requests库报SSLError" class="headerlink" title="1. Python requests库报SSLError"></a>1. Python requests库报SSLError</h2><p>在开着代理的情况下，python中的requests库会报<code>requests.exceptions.SSLError</code>错误：</p><p><img src="https://s2.loli.net/2022/01/22/3zSPJtLObXc6imf.png"></p><span id="more"></span><p>对session设置trust_env即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.trust_env = <span class="literal">False</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/22/D5wXdACjRvaYqSV.png" alt="image-20220122211740120"></p><h2 id="2-VSCode-Remote-SSH插件使用代理"><a href="#2-VSCode-Remote-SSH插件使用代理" class="headerlink" title="2. VSCode Remote - SSH插件使用代理"></a>2. VSCode Remote - SSH插件使用代理</h2><ol><li><p>相信大家都已经安装了git，那么去git安装目录下找到<code>connect.exe</code>，复制其路径：</p><p><img src="https://i0.hdslb.com/bfs/album/b816829464778c121c616a5c36fc840589fb2d52.png"></p></li><li><p>编辑<code>~/.ssh/config</code>文件，在要代理的服务器下面加上：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host xxxxxxx</span><br><span class="line">  HostName xxx.xxx.xx.xx</span><br><span class="line">  User xxxxxx</span><br><span class="line">  ProxyCommand C:\Program Files\Git\mingw64\bin\connect.exe -S 127.0.0.1:7890 -a none %h %p</span><br></pre></td></tr></table></figure><p>这样VSCode远程开发就可以走代理了，Windows Terminal中自带的ssh也会走代理。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-Python-requests库报SSLError&quot;&gt;&lt;a href=&quot;#1-Python-requests库报SSLError&quot; class=&quot;headerlink&quot; title=&quot;1. Python requests库报SSLError&quot;&gt;&lt;/a&gt;1. Python requests库报SSLError&lt;/h2&gt;&lt;p&gt;在开着代理的情况下，python中的requests库会报&lt;code&gt;requests.exceptions.SSLError&lt;/code&gt;错误：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/01/22/3zSPJtLObXc6imf.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="小问题汇总" scheme="http://miaoguoge.xyz/categories/%E5%B0%8F%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    
    
    <category term="代理" scheme="http://miaoguoge.xyz/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Layer2技术</title>
    <link href="http://miaoguoge.xyz/layer2/"/>
    <id>http://miaoguoge.xyz/layer2/</id>
    <published>2022-01-12T05:40:12.000Z</published>
    <updated>2022-03-05T12:57:31.051Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-ETH2-0概述"><a href="#1-ETH2-0概述" class="headerlink" title="1. ETH2.0概述"></a>1. ETH2.0概述</h2><p>随着ETH1.0上交易量激增，交易费用不断提升、交易时间也不断加大。而ETH2.0主要解决的是可扩展性、网络拥堵和高gas费用的问题。</p><p>不同于ETH1.0的PoW（工作量证明）共识，2.0采用的是PoS（权益证明）共识，前期的网络将继续作为2.0的并行系统存在。</p><span id="more"></span><p><strong>以太坊2.0分为4层：</strong></p><ol><li>PoW主链层：即1.0的单链，在过渡阶段，会逐渐将该层的ETH转移到信标链中；</li><li><strong>信标链</strong>层：负责管理分片链，并参与分片链之间的互通；</li><li><strong>分片</strong>链层：有64条不同的链，与信标链进行沟通、存储数据、运行合约等，每一条链都相当于一条以太坊1.0；</li><li>虚拟机层：eWASM虚拟机，运行智能合约的执行环境，建立于分片上。</li></ol><p>将同时存在两个并行系统。ETH1将继续作为工作链的证明，而ETH2将在新的权益证明系统下运行。</p><p><strong>以太坊2.0有3个阶段（phase）：</strong></p><ol start="0"><li>信标链；</li><li>分片；</li><li>执行；</li></ol><h2 id="2-Layer2技术"><a href="#2-Layer2技术" class="headerlink" title="2. Layer2技术"></a>2. Layer2技术</h2><p>虽说ETH2.0可以解决上述问题，但其短时间内难以过度完毕，因此，Layer2技术对区块链进行扩容，用来缓解上述问题。</p><p>Layer2在保持原Layer1功能简单稳定的前提下，把一些原本在 Layer1 上的计算和操作，放在链下去做，在以太坊区块链外部进行扩容。Layer2可以替 Layer1 承担大部分计算工作，比如将以太坊交易从主链上分离出来，降低一层网络的负担，从而实现扩容。但Layer2 只能做到局部共识。</p><p>Layer2有多种解决方案，如Optimistic Rollup、ZK Rollup等。</p><h2 id="3-Optimistic-Rollup"><a href="#3-Optimistic-Rollup" class="headerlink" title="3. Optimistic Rollup"></a>3. Optimistic Rollup</h2><p>通过计算状态更新来增加网络吞吐量，运行一个名为OVM的EVM兼容虚拟机，它允许执行与以太坊上相同的智能合约，使现有的智能合约更容易维护其可组合性。<a href="http://miaoguoge.xyz/uniswap-note/"><strong>Uniswap</strong></a>正是采用了这一方案。</p><p><strong>优点：</strong></p><ol><li>兼容EVM；</li><li>安全性和去中心化程度更高；</li><li>高度的通用计算。</li></ol><p><strong>缺点：</strong></p><ol><li>隐私代价更高；</li><li><em>欺诈证明机制</em>导致退出期较长（1-7天）。</li></ol><p><strong>欺诈证明机制：</strong></p><p>由于区块可能包含不正确的状态转换，因此欺诈证明机制允许在一个时间范围（争议时间段，DTF，Dispute Time Frame）内对此错误状态提出异议。若在DTF内未提交欺诈证据，则认为该状态转换是正确的；反之，若欺诈证明被提交给了智能合约，并且确实被验证了该状态转换是错误的，则会导致智能合约恢复到上一次的正确状态，随后可能会对违规方进行惩罚。</p><h2 id="4-ZK-Rollup"><a href="#4-ZK-Rollup" class="headerlink" title="4. ZK Rollup"></a>4. ZK Rollup</h2><p>所有资金由主链上的智能合约持有，而计算和存储则在链下进行。每个Rollup区块都会生成一个状态转换<em>零知识证明</em>（SNARK），并通过主链合约进行验证。</p><p><strong>优点：</strong></p><ol><li>绝对的安全性；</li><li>低延迟。</li></ol><p><strong>缺点：</strong></p><ol><li>需要耗费大量计算资源，前期投入较大；</li><li>通用智能合约的支持难度较大。</li></ol><p><strong>零知识证明：</strong></p><p>零知识证明技术可以“模拟”出一个第三方，来保证某一个论断是可信的。</p><p>Vitalik 采用 zkSNARK 技术给现有的以太坊框架带来几十倍的性能提升。在传统的区块链架构中，同样的计算被重复多次，比如签名的校验，交易合法性校验，智能合约的执行等等。这些计算过程都可以被零知识证明技术进行压缩。</p><h2 id="5-分片"><a href="#5-分片" class="headerlink" title="5. 分片"></a>5. 分片</h2><p>总体来说，ETH2采用的分片机制指的就是对数据库进行横向分割。每条分片链都拥有一个节点子集，在该链上进行工作。虚拟矿工和验证者被分配到不同的分片中，并且只处理和验证自己所在分片链上的交易。</p><p>为保证分片安全性，每个分片区块都有一个委员会，其中的验证者被随机分配。如果攻击者控制的验证者少于总数的三分之一，其想要攻击单个分片是难以实现的。</p><h2 id="6-beacon-chain"><a href="#6-beacon-chain" class="headerlink" title="6. 信标链"></a>6. 信标链</h2><p>信标链这一名词来源于随机信标（randomness beacon, 向公众提供随机数字）这一概念。信标链在一个伪随机的过程（RANDAO）中执行共识。</p><h3 id="6-1-时隙-slots-和时段-epochs"><a href="#6-1-时隙-slots-和时段-epochs" class="headerlink" title="6.1 时隙 (slots) 和时段 (epochs)"></a>6.1 时隙 (slots) 和时段 (epochs)</h3><p>每个slot为12s，每个epoch由32个slot组成，即6分24秒。创世区块在epoch0中的slot0中产生。当系统在理想情况下运转时，每12秒就有一个信标链区块和64个分片区块产生。因此可以将一个slot看作是区块生成时间。</p><h3 id="6-2-验证者-（validators）和证明-（attestations）"><a href="#6-2-验证者-（validators）和证明-（attestations）" class="headerlink" title="6.2 验证者 （validators）和证明 （attestations）"></a>6.2 验证者 （validators）和证明 （attestations）</h3><p>在以太坊2.0中，<strong>验证者</strong> (validators) 是权益证明 (PoS) 共识机制中的“虚拟矿工”。<strong>区块提议者</strong>（block proposer）是被随机挑选出来生产区块的验证者。大多数时候，验证者则充当<strong>证明人</strong>（attesters）的角色，对信标区块和分片区块进行投票。这些投票会记录在信标链上，用以决定信标链和分片链的<strong>头部</strong> (heads)。随机验证者在每个slot中提议一个区块，如果其他验证者投票赞成该区块，那么提议验证者将会获得奖励。</p><p>一份<strong>证明</strong>（attestation）则是验证者的一记投票，投票通过验证者的余额进行加权。除区块之外，证明也会在系统中进行广播。验证者之间也会互相监督，通过举报其他验证者自相矛盾的投票或提议多个区块的行为，从而获得奖励。</p><p>在以太坊2.0阶段，用户通过质押ETH来激活和管理验证者。质押者每质押32个ETH，一个验证者就会被激活。但每个验证者拥有的余额<strong>最多为32个ETH</strong>。RANDAO根据验证者余额的权重，选择出区块提议者。</p><h3 id="6-3-交联（crosslinks）"><a href="#6-3-交联（crosslinks）" class="headerlink" title="6.3 交联（crosslinks）"></a>6.3 交联（crosslinks）</h3><p>交联是指将一个信标区块和一个分片区块连接起来。在一个交联中，信标链紧跟分片链头，由于一个信标区块中有64个分片，因此至多可以容纳64个交联。所有分片链全程都与信标链紧密相连。</p><h3 id="6-4-委员会（committees）"><a href="#6-4-委员会（committees）" class="headerlink" title="6.4 委员会（committees）"></a>6.4 委员会（committees）</h3><p>委员会由一组验证者组成，他们为信标链服务。每个slot的委员会至少由128位验证者组成，一名验证者在每个epoch中只参与一个委员会。一个委员会将会被随机分配到一个分片上，并将其交联到信标区块中。分片委员会仅进行<strong>生产</strong>分片区块的工作。许多分片区块由分片链验证者生产，且不需要与信标链联系。然而，如果某个分片想要和其他分片通信，则需要借助信标委员会将其与信标区块进行交联。</p><p>所有验证者都要在自己所在的slot中投票选出信标链头，这个过程被称为<strong>LMD GHOST投票</strong>。每个委员会都要在自己所在的slot中尝试交联某个特定的分片。</p><h3 id="6-5-检查点（Beacon-Chain-Checkpoints）"><a href="#6-5-检查点（Beacon-Chain-Checkpoints）" class="headerlink" title="6.5 检查点（Beacon Chain Checkpoints）"></a>6.5 检查点（Beacon Chain Checkpoints）</h3><p><strong>检查点</strong> (checkpoints) 就是位于epoch第一个slot里的区块，如果这个slot内没有产生区块，则最近的前一个区块即为检查点。每个epoch都会有一个检查点区块；一个区块可能同时是多个epoch的检查点。检查点也被称为<strong>时段边界区块</strong>（epoch boundary block，EBB）。</p><p>在发起一次LMD GHOST投票时，验证者也要为最近一个epoch的检查点投票，该检查点叫做<strong>目标检查点</strong>（target)。该投票叫做<strong>Casper FFG投票</strong>，而且还包括对前一个检查点（<strong>来源检查点</strong>，source）的投票。验证者只需为自己所分配到的slot发起LMD GHOST投票，但是每一个epoch上的所有验证者都要为epoch的检查点发起FFG投票。</p><p><strong>绝对多数</strong>（supermajority）是指某个投票获得了所有活跃验证者总余额2&#x2F;3的支持。 </p><h3 id="6-6-最终确定性（Finality）"><a href="#6-6-最终确定性（Finality）" class="headerlink" title="6.6 最终确定性（Finality）"></a>6.6 最终确定性（Finality）</h3><p>当一个epoch结束之后，如果其检查点形成了绝对多数，那么该检查点就被<strong>证明</strong>（justified）了。如果一个检查点已经被证明，且其下一个epoch的检查点也被证明了，那么该检查点就被<strong>最终确定</strong>（finalized）了。一般来说，一个检查点会在两个epoch内得以最终确定。</p><p>通常来说，用户交易发生在一个epoch的中间部分，此时距下一个检查点还有半个epoch的时间，也就是说，一笔交易经过2.5 个epoch便可得以最终确定。在理想情况下，超过2&#x2F;3的证明将会被打包进某个epoch的第22个slot中。因此交易得以最终确定的平均时长为14分钟（0.5epoch+1epoch+22slot）。</p><p>虽然最终确定性仅在epoch边界的时候产生，但证明是逐块累加的。当一个信标区块被最终确定时，与该块所交联的分片区块也能被最终确定。检查点可以在离其最近的epoch中被证明，但是至少隔一个epoch才能被最终确认。</p><h3 id="6-7-证明（attestations）"><a href="#6-7-证明（attestations）" class="headerlink" title="6.7 证明（attestations）"></a>6.7 证明（attestations）</h3><p>一则证明包含一个LMD GHOST投票和一个FFG投票。在单个epoch，一名验证者可能有两份证明被打包上链。如果验证者在其所分配的slot里发送证明，且该证明被打包上链，那么验证者获得的奖励为最大值；随后打包上链所获得的奖励就会不断减少。为了留给验证者准备的时间，他们被提前一个epoch分配到委员会中。一旦epoch开始，提议者只会被分配到各slot中。委员会将每一名证明者的签名聚合成一个签名：当验证者在同一个委员会中，并做出了同样的LMD GHOST和FFG投票时，他们的签名就可以被聚合。</p><p><strong>信标链验证者奖惩机制：</strong></p><ol><li>证明者奖励（attester rewards）</li><li>证明者惩罚（attester penalties）</li><li>质押者特有风险（typical downside risk for stakers）</li><li>罚没和吹哨者奖励（slashings and whistleblower rewards）</li><li>提议者奖励（proposer rewards）</li><li>不作为惩罚（inactivity penalty）</li></ol><p>当验证者所给出的证明被其他大部分验证者所同意时，会获得奖励。在阶段1中，验证者也可以通过与分片产生交联而获取奖励。相反，如果验证者没有提交证明，或者其投票选出的区块最终没有被确定，那么验证者就会受到惩罚。<strong>罚没</strong>（slashing）的数额最少为0.5个ETH，最多则是一名验证者的所有质押金额。受到罚没惩罚后，验证者会被停止继续参与工作。如果1&#x2F;3的验证者同时受到了罚没，他们会损失所有余额（<strong>额外惩罚</strong>）。而对罚没行为举报成功的验证者，则可以获取吹哨者奖励。</p><p>区块一旦得以最终确定，一直在线且妥善完成工作的验证者，他们提议区块所能获得的奖励将提高1&#x2F;8。如果发生罚没行为，提议者还可以将罚没证据打包进区块，从而获得少量报酬。在阶段0中，所有吹哨者的奖励实际上都归于提议者。</p><p>如果有超过4个epoch没有获得最终确定性，那么所有验证者都要受到翻倍的<strong>不作为惩罚</strong>，直到下一个检查点被最终确定。其作用在于：如果50%的验证者掉线了，将在21天后重新对区块进行最终确定。</p><h3 id="6-8-罚没"><a href="#6-8-罚没" class="headerlink" title="6.8 罚没"></a>6.8 罚没</h3><p>如果出现以下这三种情况，要对验证者进行罚没惩罚：</p><ol><li><p><strong>双重提议</strong>（double proposal）</p><p>指一名区块提议者在他所分配到的slot里提议一个以上的区块。</p></li><li><p><strong>双重投票</strong>（double vote）</p><p>指一名验证者针对同一个目标检查点、不同的源检查点发起两次FFG投票。</p></li><li><p><strong>环绕投票</strong>（surround vote）</p><p>指一名验证者发起的FFG投票环绕之前的FFG投票，或是被之前的FFG投票所环绕。</p></li></ol><p>LMD GHOST投票不会受到罚没惩罚。针对同一个源检查点的两次FFG投票不会受到罚没惩罚（这可以增加系统的灵活性）。一名<strong>吹哨者</strong>提出举报时，需要打包冲突投票的相关信息来证明该验证者应受到罚没。</p><h3 id="6-9-验证者激活和生命周期"><a href="#6-9-验证者激活和生命周期" class="headerlink" title="6.9 验证者激活和生命周期"></a>6.9 验证者激活和生命周期</h3><p>一个用户在以太坊主网的存款合约（deposit contract）里质押32个ETH，就会激活一位验证者。当验证者的余额低于16个ETH时，信标链就会停止这些验证者的工作。当验证者工作2048个epoch后，可以自愿选择退出。退出时，质押者需要等待4个epoch才能撤出其质押金。在这4个epoch之内，验证者仍然有可能面临举报和罚没。若其受到了罚没惩罚，则必须等待8192个epoch之后才能够提出余额。</p><p>为避免短时间内激活大量验证者对系统进行攻击，单位epoch上验证者激活和退出的数量存在限制。激活信标链至少需要16384个创世验证者。信标链需要至少262,144个验证者来生产区块，每个区块包含64条交联。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-ETH2-0概述&quot;&gt;&lt;a href=&quot;#1-ETH2-0概述&quot; class=&quot;headerlink&quot; title=&quot;1. ETH2.0概述&quot;&gt;&lt;/a&gt;1. ETH2.0概述&lt;/h2&gt;&lt;p&gt;随着ETH1.0上交易量激增，交易费用不断提升、交易时间也不断加大。而ETH2.0主要解决的是可扩展性、网络拥堵和高gas费用的问题。&lt;/p&gt;
&lt;p&gt;不同于ETH1.0的PoW（工作量证明）共识，2.0采用的是PoS（权益证明）共识，前期的网络将继续作为2.0的并行系统存在。&lt;/p&gt;</summary>
    
    
    
    <category term="区块链" scheme="http://miaoguoge.xyz/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
    <category term="ETH" scheme="http://miaoguoge.xyz/tags/ETH/"/>
    
  </entry>
  
  <entry>
    <title>《关于一个汉字为什么会有两个UTF-8编码这件事》</title>
    <link href="http://miaoguoge.xyz/two-utf-8/"/>
    <id>http://miaoguoge.xyz/two-utf-8/</id>
    <published>2021-12-13T03:11:17.000Z</published>
    <updated>2021-12-13T03:52:09.312Z</updated>
    
    <content type="html"><![CDATA[<p>事情的起因是每次我从PDF里复制一段话出来粘贴到word中时，总是会出现下面这种格式错乱的情况：</p><p><img src="https://i0.hdslb.com/bfs/album/3fd76a650d72736f3cf8ba370122debe2528fa97.png"></p><p><img src="https://i0.hdslb.com/bfs/album/a80f2835bc649aaf0aea3ade19c11cd5ed3c4cb9.png"></p><span id="more"></span><p>这显然是由于PDF中的换行符被错误复制出来的问题，我就想拿python写个简单的脚本自动监听剪贴板并替换掉换行符，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> win32clipboard</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clipboard_get</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取剪贴板数据&quot;&quot;&quot;</span></span><br><span class="line">    win32clipboard.OpenClipboard()</span><br><span class="line">    data = win32clipboard.GetClipboardData(win32clipboard.CF_UNICODETEXT)</span><br><span class="line">    win32clipboard.CloseClipboard()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clipboard_set</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;设置剪贴板数据&quot;&quot;&quot;</span></span><br><span class="line">    win32clipboard.OpenClipboard()</span><br><span class="line">    win32clipboard.EmptyClipboard()</span><br><span class="line">    win32clipboard.SetClipboardData(win32clipboard.CF_UNICODETEXT, data)</span><br><span class="line">    win32clipboard.CloseClipboard()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">char_replace</span>(<span class="params">txt</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;\n&#x27;</span> <span class="keyword">in</span> txt:</span><br><span class="line">        new_txt = txt.replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">100</span> + <span class="string">f&#x27;\n【处理后】 <span class="subst">&#123;new_txt&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>, new_txt</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span>, txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    recent_txt = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        txt = clipboard_get()</span><br><span class="line">        <span class="keyword">if</span> txt != recent_txt:</span><br><span class="line">            has_replaced, new_txt = char_replace(txt)</span><br><span class="line">            <span class="keyword">if</span> has_replaced:</span><br><span class="line">                clipboard_set(new_txt)</span><br><span class="line">            recent_txt = txt</span><br><span class="line">        time.sleep(<span class="number">0.4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>我再将那一段话复制到记事本里，发现换行符被很顺利的去掉了。但同时我也发现了一个在word下没发现的问题：</p><p><img src="https://i0.hdslb.com/bfs/album/0ef207058f6a4cff349a73ed1aa2c2352fdeaa43.png"></p><p>有一些字会比其他的字要偏细，也和正常用输入法打出来的同样的字粗细不同，我将其复制到QQ里，发现也是不同的，但是从手机上看起来就很正常：</p><p><img src="https://i0.hdslb.com/bfs/album/ea55d34aaf87b680f0fe6b2d7fd118b1bb7132a0.png"></p><p>我查询了两个“网”字的base64编码，发现他们不一样，这说明它们根本就不是同一个字！</p><p><img src="https://i0.hdslb.com/bfs/album/d6d2b9959ffb1799d262eff6bf769458c4e01a04.png"></p><p>我又想起了现在的汉字多半是UTF-8编码的，我又去查询了一下，果然它们有着不同的编码：</p><p><img src="https://i0.hdslb.com/bfs/album/2774bcb04557100ad9a05d0bca11853ed1b49e34.png"></p><p>但是，一个汉字为什么会有两个不同的UTF-8编码呢？</p><p>我找到了UTF-8编码表：<a href="https://www.utf8-chartable.de/">Unicode&#x2F;UTF-8-character table (utf8-chartable.de)</a></p><p><img src="https://i0.hdslb.com/bfs/album/ac016c1ed7a3fe117951d69752789ff9b554f27d.png"></p><p>这下终于破案了，那些奇怪的字是康熙字典部首里的部首，编码是<code>2F00 - 2FDF</code>，而我们正常使用的汉字叫做中日韩统一表意文字，编码是<code>4E00 - 9FFF</code>。</p><p>随后我又在GitHub上找到了康熙部首对照字典：<a href="https://github.com/furuiyang0715/spider_notes/blob/master/codes/kangxi.json">spider_notes&#x2F;kangxi.json at master · furuiyang0715&#x2F;spider_notes (github.com)</a></p><p><img src="https://i0.hdslb.com/bfs/album/c35216acc8226060823f7c374f9bda0ac49d5c1e.png"></p><p>这次再改下程序就OK了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> win32clipboard</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> clipboard.replace_table <span class="keyword">import</span> replace_table</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clipboard_get</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取剪贴板数据&quot;&quot;&quot;</span></span><br><span class="line">    win32clipboard.OpenClipboard()</span><br><span class="line">    data = win32clipboard.GetClipboardData(win32clipboard.CF_UNICODETEXT)</span><br><span class="line">    win32clipboard.CloseClipboard()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clipboard_set</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;设置剪贴板数据&quot;&quot;&quot;</span></span><br><span class="line">    win32clipboard.OpenClipboard()</span><br><span class="line">    win32clipboard.EmptyClipboard()</span><br><span class="line">    win32clipboard.SetClipboardData(win32clipboard.CF_UNICODETEXT, data)</span><br><span class="line">    win32clipboard.CloseClipboard()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">char_replace</span>(<span class="params">txt</span>):</span></span><br><span class="line">    has_replaced = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> old_char, new_char <span class="keyword">in</span> replace_table.items():</span><br><span class="line">        <span class="keyword">if</span> old_char <span class="keyword">in</span> txt:</span><br><span class="line">            txt = txt.replace(old_char, new_char)</span><br><span class="line">            has_replaced = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> has_replaced:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">100</span> + <span class="string">f&#x27;\n【处理后】 <span class="subst">&#123;txt&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> has_replaced, txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    recent_txt = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        txt = clipboard_get()</span><br><span class="line">        <span class="keyword">if</span> txt != recent_txt:</span><br><span class="line">            has_replaced, new_txt = char_replace(txt)</span><br><span class="line">            <span class="keyword">if</span> has_replaced:</span><br><span class="line">                clipboard_set(new_txt)</span><br><span class="line">            recent_txt = txt</span><br><span class="line">        time.sleep(<span class="number">0.4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/76209221f696363664963156c248e952da56f0c7.png"></p><p>复制过来终于正常了：</p><p><img src="https://i0.hdslb.com/bfs/album/b1d7884ce7c8de1dc16f5d22e8651a330ae1477f.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;事情的起因是每次我从PDF里复制一段话出来粘贴到word中时，总是会出现下面这种格式错乱的情况：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i0.hdslb.com/bfs/album/3fd76a650d72736f3cf8ba370122debe2528fa97.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i0.hdslb.com/bfs/album/a80f2835bc649aaf0aea3ade19c11cd5ed3c4cb9.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="工具" scheme="http://miaoguoge.xyz/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="复制" scheme="http://miaoguoge.xyz/tags/%E5%A4%8D%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Uniswap v3 学习笔记</title>
    <link href="http://miaoguoge.xyz/uniswap-note/"/>
    <id>http://miaoguoge.xyz/uniswap-note/</id>
    <published>2021-10-20T14:41:28.000Z</published>
    <updated>2022-10-14T06:54:34.965Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://uniswap.org/whitepaper-v3.pdf">Uniswap v3</a> 学习笔记</p><span id="more"></span><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p><strong>TWAP：</strong>在设定的时间范围内匀速下单，降低市场冲突，最小化与市场TWAP的偏差。</p><p>由于Uniswap v2在设定时就没有考虑可升级性，因此Uniswap v3是一个全新的合约。同样的，v3也没有考虑可升级性。</p><h2 id="2-集中流动性"><a href="#2-集中流动性" class="headerlink" title="2. 集中流动性"></a>2. 集中流动性</h2><p>Uniswap v3 定义的理念是集中流动性——在某个价格范围内限制流动性。</p><p>在v2版本中，流动性均匀的沿着 $x\cdot y&#x3D;k$ 分布，且允许流动性贯穿整个价格范围 $(0,\infty)$ ，这会造成某些资产高效的聚合，而池子里的另一些资产则几乎不会被接触。</p><p>v3版本的新公式：<br>$$<br>(x+\frac{L}{\sqrt{p_b}})(y+L\sqrt{p_a})&#x3D;L^2<br>$$<br><img src="https://i0.hdslb.com/bfs/album/0a40f734289d0832766c4c11f195662ec49f04ba.png"></p><p><img src="https://i0.hdslb.com/bfs/album/94a0ec4be1d3b5cdf5b92a1a821c2db5fa390e4e.png"></p><p>流动性提供商（LPs，Liquidity Providers）可以创建无数量限制的位置，其中每个都拥有自己的价格范围。</p><p><img src="https://i0.hdslb.com/bfs/album/5ebd72f37207da5d3c702a4bc47755102516a121.png"></p><p>通过专注于在当前价格附近的小区域，LPs可以降低花费。通过在价格移动时增加或删除tokens来保持流动性的活动。</p><h3 id="2-1-范围订单"><a href="#2-1-范围订单" class="headerlink" title="2.1 范围订单"></a>2.1 范围订单</h3><p>位置的范围不能无限窄。若一个位置被超出，则它会被撤销。否则当价格重新落到此位置时，此位置会逆转交易。</p><h2 id="3-架构变化"><a href="#3-架构变化" class="headerlink" title="3. 架构变化"></a>3. 架构变化</h2><h3 id="3-1-每对代币可在多个池子"><a href="#3-1-每对代币可在多个池子" class="headerlink" title="3.1 每对代币可在多个池子"></a>3.1 每对代币可在多个池子</h3><p>在早期的Uniswap版本中，每对代币只能对应一个流动性池。且稳定币池费用过高，不稳定币及稀有币池费用过低。</p><p>v3版本中每个池子可以有不同的交换费用，默认共有三种可选：0.05%、0.30%和1%。</p><h3 id="3-2-不可替代的流动性"><a href="#3-2-不可替代的流动性" class="headerlink" title="3.2 不可替代的流动性"></a>3.2 不可替代的流动性</h3><h4 id="3-2-1-非复合费用"><a href="#3-2-1-非复合费用" class="headerlink" title="3.2.1 非复合费用"></a>3.2.1 非复合费用</h4><p>早期版本中，挣得的费用可以不断地再作为流动性投入池子，这意味着池子的流动性会不断增长。</p><p>v3版本中挣得的费用会被分散存储。</p><h4 id="3-2-2-移除原生流动性代币"><a href="#3-2-2-移除原生流动性代币" class="headerlink" title="3.2.2 移除原生流动性代币"></a>3.2.2 移除原生流动性代币</h4><p>在早期版本中，池子的合约同时也是一个<code>ERC-20</code>合约，这与v2版本的理念不符。</p><p>而在v3版本中，池子合约不再是<code>ERC-20</code>代币的实现。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://uniswap.org/whitepaper-v3.pdf&quot;&gt;Uniswap v3&lt;/a&gt; 学习笔记&lt;/p&gt;</summary>
    
    
    
    <category term="区块链" scheme="http://miaoguoge.xyz/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
    <category term="ETH" scheme="http://miaoguoge.xyz/tags/ETH/"/>
    
  </entry>
  
  <entry>
    <title>使用docker创建科协学习用服务器</title>
    <link href="http://miaoguoge.xyz/kexie-docker/"/>
    <id>http://miaoguoge.xyz/kexie-docker/</id>
    <published>2021-10-15T10:06:57.000Z</published>
    <updated>2021-10-16T12:08:34.877Z</updated>
    
    <content type="html"><![CDATA[<p>科协内部培训的第一节课是我教的Linux基础，考虑到肯定会有部分同学没有Linux服务器并且没有提前安装好Linux虚拟机，我决定在科协的服务器上开20个docker的ubuntu镜像给他们使用。</p><span id="more"></span><h2 id="1-手动操作步骤"><a href="#1-手动操作步骤" class="headerlink" title="1. 手动操作步骤"></a>1. 手动操作步骤</h2><h3 id="1-通过apt安装docker服务"><a href="#1-通过apt安装docker服务" class="headerlink" title="1 通过apt安装docker服务"></a>1 通过apt安装docker服务</h3><p>在科协服务器上，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install docker</span><br><span class="line">sudo apt install docker.io</span><br></pre></td></tr></table></figure><h3 id="2-下载ubuntu镜像"><a href="#2-下载ubuntu镜像" class="headerlink" title="2 下载ubuntu镜像"></a>2 下载ubuntu镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull ubuntu</span><br></pre></td></tr></table></figure><h3 id="3-创建Linux容器"><a href="#3-创建Linux容器" class="headerlink" title="3. 创建Linux容器"></a>3. 创建Linux容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -it -p 0.0.0.0:3002:22 --name ubuntu-02 ubuntu</span><br></pre></td></tr></table></figure><p>此时便进入了新创建容器中：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gvg5t1x2x3j60rk032dg602.jpg"></p><h3 id="4-安装并配置sshd"><a href="#4-安装并配置sshd" class="headerlink" title="4. 安装并配置sshd"></a>4. 安装并配置sshd</h3><p>但由docker创建的ubuntu是没有sshd的，所以需要先安装sshd：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install -y openssh-server</span><br></pre></td></tr></table></figure><p>区域选6. Asia：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gvg5vezbd6j60rw044glx02.jpg"></p><p>时区选70. Shanghai：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gvg5wbpan1j60uo0iswi502.jpg"></p><p>待安装成功后，需要打开root账户远程登录，否则无法登陆：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install -y vim</span><br><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>将其中<code>PermitRootLogin</code>改为yes：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gvg5ztwqa1j60f4056mxe02.jpg"></p><p>保存退出后，打开sshd服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/ssh start</span><br></pre></td></tr></table></figure><p>随后更改密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure><p>在<code>~</code>目录新建一个<code>init.sh</code>，内容为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/ssh start</span><br></pre></td></tr></table></figure><h3 id="5-退出并测试登陆"><a href="#5-退出并测试登陆" class="headerlink" title="5. 退出并测试登陆"></a>5. 退出并测试登陆</h3><p>按键盘<code>Ctrl + P + Q</code>脱离此容器，新开一个终端，测试ssh：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gvg63arnxnj611w0quaf302.jpg"></p><h2 id="2-从容器构建镜像"><a href="#2-从容器构建镜像" class="headerlink" title="2. 从容器构建镜像"></a>2. 从容器构建镜像</h2><p>如果20个容器都这样操作一番，未免太过麻烦。我们可以将刚刚配置好的Ubuntu系统打包成镜像，剩下的就从镜像直接生成容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker commit -m=<span class="string">&quot;ubuntu_sshd&quot;</span> -a=<span class="string">&quot;hoshimgg&quot;</span> 33e51d40d736 ubuntu/sshd:1.0</span><br><span class="line">sudo docker images</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/0e704b29d3d59b59cb176a9b7a824146c62cd3e6.png"></p><h2 id="3-从新镜像创建剩下的容器"><a href="#3-从新镜像创建剩下的容器" class="headerlink" title="3. 从新镜像创建剩下的容器"></a>3. 从新镜像创建剩下的容器</h2><p>先手动创建一个看看运行是否正常，注意创建时加入<code>-d</code>命令，这样创建后便不会自动attach进去。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -itd -p 0.0.0.0:3006:22 --name ubuntu-06 ubuntu/sshd:1.3</span><br><span class="line">sudo docker <span class="built_in">exec</span> -it ubuntu-06 /bin/sh /root/init.sh</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/5742c7c308e37cd74b09bc9e97d445dc2498d4f9.png"></p><p>手动测试没问题后，我们便开始编写自动化脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">num=7</span><br><span class="line">while [ $num -le 20 ]</span><br><span class="line">do</span><br><span class="line">        if [ $num -le 9 ]; then</span><br><span class="line">                true_num=&quot;0$&#123;num&#125;&quot;</span><br><span class="line">        else</span><br><span class="line">                true_num=$num</span><br><span class="line">        fi</span><br><span class="line">        docker run -itd -p 0.0.0.0:30$&#123;true_num&#125;:22 --name ubuntu-$&#123;true_num&#125; ubuntu/sshd:1.3</span><br><span class="line">        docker exec -it ubuntu-$&#123;true_num&#125; /bin/sh /root/init.sh</span><br><span class="line">        num=`expr $num + 1`</span><br><span class="line">        echo 30$true_num</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/eec07e2f75e6c6cc8bb828e3c2f75df576496544.png"></p><p><img src="https://i0.hdslb.com/bfs/album/5c0ba24b414652d157f0fc073360b4ba64d644ce.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;科协内部培训的第一节课是我教的Linux基础，考虑到肯定会有部分同学没有Linux服务器并且没有提前安装好Linux虚拟机，我决定在科协的服务器上开20个docker的ubuntu镜像给他们使用。&lt;/p&gt;</summary>
    
    
    
    <category term="科协" scheme="http://miaoguoge.xyz/categories/%E7%A7%91%E5%8D%8F/"/>
    
    
    <category term="docker" scheme="http://miaoguoge.xyz/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>以太坊学习笔记</title>
    <link href="http://miaoguoge.xyz/ETH-note/"/>
    <id>http://miaoguoge.xyz/ETH-note/</id>
    <published>2021-10-12T06:27:32.000Z</published>
    <updated>2022-10-14T06:54:58.689Z</updated>
    
    <content type="html"><![CDATA[<p>以太坊学习笔记</p><span id="more"></span><h2 id="0-术语"><a href="#0-术语" class="headerlink" title="0. 术语"></a>0. 术语</h2><p><strong>外部拥有账户 EOA</strong></p><p>Externally Owned Account，外部拥有账户，由以太坊的真人用户创建的账户。账户的一种，另一种是合约账户。</p><p><strong>地址 Address</strong></p><p>代表一个账户，是 ECDSA 公钥的 Keccak 散列的最右边的160位，表现为16进制的40个字符长度，在前面加上<code>0x</code>字符。</p><p><strong>比特币改进提议 BIP</strong></p><p>Bitcoin Improvement Proposals，由比特币社区成员提交。</p><p><strong>区块 Block</strong></p><p>区块是关于所包含的交易的所需信息（区块头）的集合，以及称为ommer的一组其他区块头。它被矿工添加到以太坊网络中。</p><p><strong>区块链 Blockchain</strong></p><p>由 工作证明系统 验证的一系列区块，每个区块都连接到它的前任，一直到创世区块。这与比特币协议不同，它没有块大小限制。</p><p><strong>共识 Consensus</strong></p><p>网络上的大量大多数节点，在其本地验证的最佳区块链中都有相同的区块的情况。</p><p><strong>共识规则 Consensus rules</strong></p><p>完整节点为了与其他节点保持一致，遵循的区块验证规则。</p><p><strong>合约账户 Contract account</strong></p><p>包含代码的账户，每当它从另一个账户（EOA 或合约）收到交易时将执行。</p><p><strong>合约创建交易 Contract creation transaction</strong></p><p>一个特殊的交易，以“零地址”作为收件人，用于注册合约并将其记录在以太坊区块链中。</p><p><strong>去中心化自治组织 DAO</strong></p><p>Decentralised Autonomous Organization，没有层级管理的公司和其他组织。</p><p>也可能是指2016年4月30日发布的名为<code>The DAO</code>的合约。</p><p><strong>去中心化应用 DApp</strong></p><p>Decentralised Application，Web 应用程序，至少包括智能合约和 web 用户界面，许多 DApp 也包括去中心化存储和&#x2F;或消息协议和平台。</p><p><strong>契约 Deed</strong></p><p>不可替代的标记标准，证明了所有权并且不可互换。但目前还未在任何管辖区都被认可为合法文件。</p><p><strong>难度 Difficulty</strong></p><p>网络范围的设置，控制产生工作量证明需要多少计算。</p><p><strong>数字签名 Digital signature</strong></p><p>用户可以使用私钥生成称为“签名”的短字符串数据，使其他人可以验证该文件由该特定私钥的所有者“签名”，以及该文件在签署后未被更改。</p><p><strong>椭圆曲线数字签名算法 ECDSA</strong></p><p>Elliptic Curve Digital Signature Algorithm，用来确保资金只能由合法所有者使用。</p><p><strong>以太坊改进建议 EIP</strong></p><p>Ethereum Improvement Proposals，描述以太坊平台的建议标准。</p><p><strong>以太坊名称服务 ENS</strong></p><p>Ethereum Name Service。</p><p><strong>以太坊注释请求 ERC</strong></p><p>Ethereum Request for Comments，一些 EIP 被标记为 ERC，表示试图定义以太坊使用的特定标准的建议。</p><p><strong>Ethash</strong></p><p>以太坊1.0的工作量证明算法。</p><p><strong>以太 Ether</strong></p><p>以太坊系统中使用的本地货币，符号是 <code>Ξ</code> 或 <code>Xi</code> 。</p><p><strong>事件 Event</strong></p><p>允许EVM日志工具的使用，后者可以用来在DApp的用户界面中调用JavaScript回调来监听Event。</p><p><strong>以太坊虚拟机 EVM</strong></p><p>Ethereum Virtual Machine，在以太坊中，执行模型指定了系统状态如何发生改变。 这是通过虚拟状态机的正式模型指定的。</p><p><strong>Ganache</strong></p><p>私有以太坊区块链，可以在上面进行测试，执行命令，在控制区块链如何运作时检查状态。</p><p><strong>燃气 Gas</strong></p><p>以太坊用于执行智能合约的虚拟燃料。EVM使用会计机制来衡量天然气的消耗量并限制计算资源的消耗。燃气是执行智能合约的每条指令产生的计算单位。燃气与以太加密货币挂钩。</p><p><strong>燃气限制 Gas limit</strong></p><p>区块有一个名为燃气限制的区域。它定义了整个区块中所有交易允许消耗的最大燃气量。</p><p><strong>创世区块 Genesis block</strong></p><p>区块链中的第一个块，用来初始化特定的网络和加密数字货币。</p><p><strong>硬分叉 Hard fork</strong></p><p>区块链中的一种永久性分歧，通常发生在非升级节点无法验证升级节点创建的遵循新共识规则的区块时。</p><p><strong>分层确定钱包 HD wallet</strong></p><p>使用分层确定密钥生成和传输协议的钱包。</p><p><strong>分层确定钱包种子 HD wallet seed</strong></p><p>HD钱包种子或根种子是一个可能很短的值，用作生成HD钱包的主私钥和主链码的种子。钱包种子可以用助记词表示。</p><p><strong>互换客户端地址协议 ICAP</strong></p><p>Inter exchange Client Address Protocol，以太坊地址编码，与国际银行帐号（IBAN）编码部分兼容。ICAP总是以<code>XE</code>开始。目的是引入一个新的IBAN国家代码。<code>X</code>表示”extended”，<code>E</code>表示以太坊。</p><p><strong>Keccak256</strong></p><p>以太坊使用的加密哈希方法，不同于标准的 NIST-SHA3。</p><p><strong>密钥推导方法 KDF</strong></p><p>Key Derivation Function，也称为密码扩展算法，它被keystore格式使用，以防止对密码加密的暴力破解。</p><p><strong>Keystore 文件</strong></p><p>JSON 编码的文件，包含一个（随机生成的）私钥，被一个密码加密，以提供额外的安全性。</p><p><strong>库 Library</strong></p><p>以太坊中的库，是特殊类型的合约，没有用于支付的方法，没有后备方法，没有数据存储。所以它不能接收或存储以太，或存储数据。库用作之前部署的代码，其他合约可以调用只读计算。</p><p><strong>轻量级客户端 Lightweight client</strong></p><p>是一个以太坊客户端，它不存储区块链的本地副本，也不验证块和事务。它提供了钱包的功能，可以创建和广播交易。</p><p><strong>消息 Message</strong></p><p>内部交易，从未被序列化，只在EVM中发送。</p><p><strong>矿工 Miner</strong></p><p>通过重复哈希计算，为新的区块寻找有效的工作量证明的网络节点。</p><p><strong>网络 Network</strong></p><p>将交易和区块传播到每个以太坊节点的对等网络。</p><p><strong>节点 Node</strong></p><p>参与到对等网络的软件客户端。</p><p><strong>Ommer</strong></p><p>祖父节点的子节点，但它本身并不是父节点。当矿工找到一个有效的区块时，另一个矿工可能已经发布了一个竞争的区块，并添加到区块链顶部。以太坊中的孤儿区块可以被新的区块作为ommers包含，并获得部分奖励。</p><p><strong>权益证明 PoS</strong></p><p>Proof-of-Stake，加密货币区块链协议旨在实现分布式共识的一种方法。权益证明要求用户证明一定数量的加密货币的所有权，以便能够参与交易验证。</p><p><strong>工作量证明 PoW</strong></p><p>Proof-of-Work，一份需要大量计算才能找到的数据（证明）。在以太坊，矿工必须找到符合网络难度目标的 Ethash 算法的数字解决方案。</p><p><strong>收据 Receipt</strong></p><p>以太坊客户端返回的数据，表示特定交易的结果，包括交易的哈希值、区块编号、使用的燃气量，以及在部署智能合约时的合约地址。</p><p><strong>重入攻击 Re-entrancy Attack</strong></p><p>当攻击者合约（Attacker contracts）调用受害者合约（Victim contracts）的方法时，可以重复这种攻击。称为victim.withdraw()，在对该合约函数的原始调用完成之前，再次调用victim.withdraw()方法，持续递归调用它自己。 递归调用可以通过攻击者合约的后备方法实现。 攻击者必须执行的唯一技巧是在用完燃气之前中断递归调用，并避免盗用的以太被还原。</p><p><strong>REVERT指令</strong></p><p>REVERT指令提供了一种停止执行和恢复状态更改的方式，不消耗所有提供的燃气并且能够返回原因。</p><p><strong>奖励 Reward</strong></p><p>ETH的数量，包含在每个新区块中的金额作为网络对找到工作证明解决方案的矿工的奖励。</p><p><strong>递归长度前缀 RLP</strong></p><p>Recursive Length Prefix，一种编码标准，用来编码和序列化任意复杂度和长度的对象&#x2F;数据结构。</p><p><strong>SELFDESTRUCT 操作码</strong></p><p>只要整个网络存在，智能合约就会存在并可执行。如果它们被编程为自毁的或使用委托调用（delegatecall）或调用代码（calicoed）执行该操作，它们将从区块链中消失。 一旦执行自毁操作，存储在合约地址处的剩余Ether将被发送到另一个地址，并将存储和代码从状态中移除。 尽管这是预期的行为，但自毁合约的修剪可能或不会被以太坊客户实施。</p><p><strong>智能合约 Smart Contract</strong></p><p>在以太坊的计算框架上执行的程序。</p><p><strong>交易 Transaction</strong></p><p>由原始帐户签署的提交到以太坊区块链的数据，并以特定地址为目标。交易包含元数据，例如交易的燃气限额。</p><p><strong>钱包 Wallet</strong></p><p>拥有你的所有密钥的软件。作为访问和控制以太坊账户并与智能合约交互的界面。不存储实际的硬币或代币。</p><p><strong>Wei</strong></p><p>以太的最小单位。$10^{18}\ \rm wei &#x3D; 1\ \rm ether$ .</p><p><strong>零地址 Zero address</strong></p><p>特殊的以太坊地址，全部是由 <code>0</code> 组成（即 <code>0x0000000000000000000000000000000000000000</code>)，被指定为创建一个智能合约所发起的交易的目标地址（即 <code>to</code> 参数的值）。</p><h2 id="1"><a href="#1" class="headerlink" title="1. 以太坊概念"></a>1. 以太坊概念</h2><h3 id="1-1-以太坊基本概念及历史"><a href="#1-1-以太坊基本概念及历史" class="headerlink" title="1.1 以太坊基本概念及历史"></a>1.1 以太坊基本概念及历史</h3><p>从计算机科学的角度来说，以太坊是一种确定性但实际上无界的状态机，它有两个基本功能，第一个是全局可访问的单例状态，第二个是对状态进行更改的虚拟机。</p><p>从更实际的角度来说，以太坊是一个开源的、全球的去中心化计算架构，执行被称为 智能合约 的程序。它使用区块链来从同步和存储系统状态，并使用称为 <code>ether</code> 的加密货币来计量和约束执行资源成本。</p><p>以太坊与其他开放区块链共享许多通用元素：连接参与者的对等网络，用于状态同步（工作证明）的共识算法，数字货币（以太）和全局账本（区块链）。</p><p>开源、公开的区块链通常包括以下组件：</p><ul><li>一个连接参与者，传播交易和包含已验证交易的区块的点对点网络，基于标准的<code>gossip</code>协议。</li><li>状态机中实现的一系列共识规则。</li><li>消息，以交易的形式表示，代表状态转移。</li><li>根据共识规则处理交易的状态机。</li><li>分布式数据库，区块链，记录所有状态转移的日志。</li><li>共识算法，通过强制参与者竞争并使用共识规则约束他们，来分散区块链的控制权。</li></ul><p>相比于比特币，以太坊中的开发文化的重点是速度和创新，即使会破坏兼容性。因此以太坊开发人员面临的一个重大挑战是将代码部署到不可变账本与仍在快速发展的开发平台之间的内在矛盾。</p><p>以太坊的主要目的不是数字货币支付网络，但数字货币<code>ether</code>对于以太坊的运作来说仍是必要的。</p><p>与具有非常有限的脚本语言的比特币不同，以太坊被设计成一个通用可编程区块链，能够执行任意和无限复杂的代码。以太坊的语言是<strong>图灵完备</strong>的，这意味着它相当于一台通用计算机。</p><p>以太坊的发展计划分四个阶段进行，每个新阶段都会发生重大变化。每个阶段都可能包含不向后子版本，称为“硬分叉”。四个主要的发展阶段为：</p><ul><li>前沿（Frontier）<ul><li>冰河时代（Ice Age）</li></ul></li><li>家园（Homestead）<ul><li>DAO</li><li>蜜桔前哨（Tangerine Whistle）</li><li>假龙（Spurious Dragon）</li></ul></li><li>大都会（Metropolis）<ul><li>拜占庭（Byzantium）</li><li><strong>君士坦丁堡（Constantinople）</strong>（当前阶段）</li></ul></li><li>宁静（Serenity）</li></ul><p>原始区块链（比特币的区块链）追踪比特币单位的状态及其所有权。可以将比特币视为分布式共识状态机，其中交易引起全局的状态转移，从而更改比特币的所有权。状态转移受共识规则的制约，允许所有参与者开采数个区块后在系统的共同共识状态上汇合。</p><p>以太坊也是一个分布式状态机。除了货币所有权的状态，以太坊还可以追踪通用数据存储的状态转换，通常为键值对。以太坊有自己的<code>memory</code>用来存储代码和数据，使用区块链来跟踪这些内存随着时间的变化。可以将代码加载到其状态机中并运行该代码，并将结果状态更改存储在其区块链中。以太坊状态的变化受共识规则的支配，并且状态通过共享账本全球分布。</p><h3 id="1-2-以太坊的组件"><a href="#1-2-以太坊的组件" class="headerlink" title="1.2 以太坊的组件"></a>1.2 以太坊的组件</h3><p><strong>P2P Network</strong></p><p>以太坊在以太坊主网上运行，可以通过TCP端口30303访问，运行称作<code>ÐΞVp2p</code>的协议。</p><p><strong>Consensus rules</strong></p><p>以太坊的共识规则，在参考规范，即黄皮书中定义。</p><p><strong>Transactions</strong></p><p>Ethereum交易，一种网络消息，包括发送者，接收者，值和数据负载等。</p><p><strong>State Machine</strong></p><p>以太坊的状态转移由EVM处理，执行被称为“智能合约”的程序。</p><p><strong>Blockchain</strong></p><p>以太坊的区块链作为<code>database</code>存储在每个节点上（通常使用<code>LevelDB</code>），包含交易和系统状态。</p><p><strong>Consensus Algorithm</strong></p><p>以太坊目前使用名为<code>Ethash</code>的工作量证明算法，将逐步过渡到称为<code>Casper</code>的权益证明系统。</p><h3 id="1-3-以太坊与图灵完备性"><a href="#1-3-以太坊与图灵完备性" class="headerlink" title="1.3 以太坊与图灵完备性"></a>1.3 以太坊与图灵完备性</h3><p>以太坊是一台通用图灵机，可以计算任何图灵机可以计算的算法。</p><p>图灵完备系统可以在“无限循环”中运行。以太坊在没有实际运行时，无法预测智能合约是否会终止，或者运行多久。为了应对这一问题，以太坊引入了称为<strong>燃气（gas）</strong>的计量机制。EVM在执行智能合约时，会仔细考虑每条指令的成本。每条指令都有一个以燃气为单位的预定成本。当交易触发智能合约的执行时，它必须包含一定量的燃气，用以设定运行智能合约可消耗的计算上限。如果计算所消耗的燃气量超过交易中可用的然气量，则EVM将终止该合约的执行。</p><h3 id="1-4-去中心化应用"><a href="#1-4-去中心化应用" class="headerlink" title="1.4 去中心化应用"></a>1.4 去中心化应用</h3><p>web3.js库中包含名为<code>Swarm</code>的P2P存储网络接口和名为<code>Whisper</code>的P2P消息传递服务。通过包含这些组件，可以构建DApp。</p><h2 id="2"><a href="#2" class="headerlink" title="2. 以太坊基础"></a>2. 以太坊基础</h2><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h3><p>加密货币功能是服务于以太坊作为世界计算机的功能。以太旨在用于支付运行的智能合约。</p><p>EVM是一个全球性的单实例计算机。以太坊网络上的每个节点运行EVM的本地副本以验证合约执行，而以太坊区块链记录此世界计算机在处理交易和智能合约时变化的状态。</p><p>外部所有账户是那些拥有私人密钥的账户，它控制对资金或合约的访问。合约账户由以太坊区块链记录，由EVM执行的软件程序的逻辑所拥有和控制。区别在于人们通过EOA做出决定，而软件通过合约做出决定。</p><p>当交易目的地是合约地址时，它会导致该合约在EVM中运行，并将交易作为其输入。除了<code>ether</code>之外，交易还可以包含数据，用于指示合约中要运行的特定方法以及传递给该方法的参数。通过这种方式，合约可以产生调用其他合约的交易，从而建立复杂的执行路径。</p><h3 id="2-2-合约代码示例"><a href="#2-2-合约代码示例" class="headerlink" title="2.2 合约代码示例"></a>2.2 合约代码示例</h3><p>Solidity是智能合约编程的主要高级语言。</p><p>一个简单的合约：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">contract Faucet &#123;</span><br><span class="line">    // Give out ether to anyone who asks</span><br><span class="line">    function withdraw(uint withdraw_amount) public &#123;</span><br><span class="line">        // Limit withdrawal amount。单位为wei</span><br><span class="line">        require(withdraw_amount &lt;= 100000000000000000);</span><br><span class="line">        // Send the amount to the address that requested it</span><br><span class="line">        msg.sender.transfer(withdraw_amount);</span><br><span class="line">    &#125;</span><br><span class="line">    // Accept any incoming amount</span><br><span class="line">    function () public payable &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>uint</code>：无符号整数；</p><p><code>require</code>：如果不满足则停止执行并显示异常；</p><p><code>msg</code>：所有合约可以访问的输入对象之一，代表触发执行此合约的交易；</p><p><code>msg.sender</code>：触发此合约执行的交易的 sender，也即调用此函数的账户。</p><p><code>function () public payable &#123;&#125;</code>：默认函数，如果合约的交易没有命中任何已声明的其他函数，则会触发此函数。</p><h3 id="2-3-编译Solidity合约"><a href="#2-3-编译Solidity合约" class="headerlink" title="2.3 编译Solidity合约"></a>2.3 编译Solidity合约</h3><p>使用一个被称为Remix的在线IDE：<a href="https://remix.ethereum.org/">https://remix.ethereum.org/</a></p><p><img src="https://i0.hdslb.com/bfs/album/07c79613c4b6615fa5c5a185f59ba23860244312.png"></p><h3 id="2-4-在区块链上创建合约"><a href="#2-4-在区块链上创建合约" class="headerlink" title="2.4 在区块链上创建合约"></a>2.4 在区块链上创建合约</h3><p>使用Ropsten测试网来测试合约。在区块链上注册合约需要向零地址发起一个特殊交易。</p><p>首先安装MetaMask浏览器插件：<a href="https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn">MetaMask - Chrome 网上应用店 (google.com)</a>，</p><p><img src="https://i0.hdslb.com/bfs/album/947e2e904964c9ef35b76c0359dc70d12a285e20.png"></p><p>随后导入或者创建钱包：</p><p><img src="https://i0.hdslb.com/bfs/album/0bd2a67f84f7729803dc20814774ce9ece68193e.png"></p><h2 id="3-client"><a href="#3-client" class="headerlink" title="3. 以太坊客户端"></a>3. 以太坊客户端</h2><p>以太坊客户端是实现以太坊规范并通过对等网络与其他以太坊客户端进行通信的程序，它可以由不同的编程语言实现。</p><h3 id="3-1-以太坊网络"><a href="#3-1-以太坊网络" class="headerlink" title="3.1 以太坊网络"></a>3.1 以太坊网络</h3><p>存在着各种基于以太坊的网络，这些网络很大程度上符合以太坊“黄皮书”中定义的规范，但它们可能或不能互相操作。较为出名的以太坊网络有：Ethereum、Ethereum Classic、Ella、Expanse、Ubiq、Musicoin等。较为出名的以太坊客户端有：Geth（Go）、parity（Rust）、cpp-ethereum（C++）、pyethereum（Python）、mantis（Scala）、harmony（Java）。</p><h3 id="3-2-完整节点"><a href="#3-2-完整节点" class="headerlink" title="3.2 完整节点"></a>3.2 完整节点</h3><p>每个完整节点都可以帮助其他新节点获取块数据以引导其操作，并为运营商提供对所有交易和合约的权威和独立验证。但是，运行完整的节点会导致硬件资源和带宽的巨大成本。</p><p>轻量级客户端不会存储区块链的本地副本或验证块和交易；但提供钱包的功能，并可以创建和广播交易；同时还提供API功能（如web3js API）。轻量级客户端通常不验证区块头或交易，它们完全信任由第三方运营的完整客户端并通过RPC访问区块链。</p><h4 id="3-2-1-完整节点优缺点"><a href="#3-2-1-完整节点优缺点" class="headerlink" title="3.2.1 完整节点优缺点"></a>3.2.1 完整节点优缺点</h4><p><strong>优点：</strong></p><ul><li>可以权威性验证所有交易</li><li>无需中介即可与公共区块链上的任何合约进行交互</li><li>可以离线查询区块链状态</li><li>无需中介即可将自己的合约部署到公共区块链中</li></ul><p><strong>缺点：</strong></p><ul><li>需要大量且不断增长的硬件和带宽资源</li><li>需要较长时间完成初始同步</li></ul><h4 id="3-2-2-公共测试网优缺点"><a href="#3-2-2-公共测试网优缺点" class="headerlink" title="3.2.2 公共测试网优缺点"></a>3.2.2 公共测试网优缺点</h4><p><strong>优点：</strong></p><ul><li>测试网需要同步的数据量极少</li><li>交易所需的测试ether可以免费获得</li></ul><p><strong>缺点：</strong></p><ul><li>测试网gas免费，而主网需要考虑gas费用</li><li>测试网不会像主网那样经历网络拥塞</li></ul><h4 id="3-2-3-本地实例（TestRPC）"><a href="#3-2-3-本地实例（TestRPC）" class="headerlink" title="3.2.3 本地实例（TestRPC）"></a>3.2.3 本地实例（TestRPC）</h4><p>TestRPC节点可以创建一个本地私有区块链实例，无需其他参与者即可与之交互。</p><p>但这也意味着它没有交易的空间、无法测试公链上采矿的不可预测性、必须自己部署依赖与合约以及不能创建公共合约。</p><h3 id="3-3-运行以太坊客户端"><a href="#3-3-运行以太坊客户端" class="headerlink" title="3.3 运行以太坊客户端"></a>3.3 运行以太坊客户端</h3>]]></content>
    
    
    <summary type="html">&lt;p&gt;以太坊学习笔记&lt;/p&gt;</summary>
    
    
    
    <category term="区块链" scheme="http://miaoguoge.xyz/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
    <category term="ETH" scheme="http://miaoguoge.xyz/tags/ETH/"/>
    
  </entry>
  
  <entry>
    <title>devp2p节点发现协议v4不完全实现</title>
    <link href="http://miaoguoge.xyz/devp2p-packet/"/>
    <id>http://miaoguoge.xyz/devp2p-packet/</id>
    <published>2021-10-11T09:29:42.000Z</published>
    <updated>2022-03-05T12:57:31.049Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Node-Discovery-Protocol-v4"><a href="#Node-Discovery-Protocol-v4" class="headerlink" title="Node Discovery Protocol v4"></a><a href="https://github.com/ethereum/devp2p/blob/master/discv4.md">Node Discovery Protocol v4</a></h2><p>本文包含了Ping Packet、Pong Packet、FindNode Packet、Neighbors Packet的生成及解析，以及Ping包和Pong包的互相发送。代码如下：</p><span id="more"></span><h2 id="eth-keys安装"><a href="#eth-keys安装" class="headerlink" title="eth-keys安装"></a>eth-keys安装</h2><p>Windows下安装eth-keys需要提前安装Visual Studio生成工具。</p><p>下载地址：<a href="https://visualstudio.microsoft.com/zh-hans/visual-cpp-build-tools/">Microsoft C++ 生成工具 - Visual Studio</a></p><p>然后在工作负荷中勾选如下项目即可：</p><p><img src="https://s2.loli.net/2022/01/16/65ckeCbWjmhLPSX.png"></p><h2 id="packet-py"><a href="#packet-py" class="headerlink" title="packet.py"></a>packet.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> rlp</span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"><span class="keyword">from</span> eth_hash.auto <span class="keyword">import</span> keccak</span><br><span class="line"><span class="keyword">from</span> eth_keys <span class="keyword">import</span> KeyAPI</span><br><span class="line"><span class="keyword">from</span> eth_keys.datatypes <span class="keyword">import</span> PrivateKey</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicPacket</span>:</span></span><br><span class="line">    private_key = <span class="literal">None</span></span><br><span class="line">    public_key = <span class="literal">None</span></span><br><span class="line">    packet = <span class="literal">None</span></span><br><span class="line">    packet_header = <span class="literal">None</span></span><br><span class="line">    packet_data = <span class="literal">None</span></span><br><span class="line">    <span class="built_in">hash</span> = <span class="literal">None</span></span><br><span class="line">    signature = <span class="literal">None</span></span><br><span class="line">    packet_type = <span class="literal">None</span></span><br><span class="line">    expiration = <span class="built_in">int</span>(time.time())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.private_key = PrivateKey(secrets.token_bytes(<span class="number">32</span>))</span><br><span class="line">        self.public_key = self.private_key.public_key</span><br><span class="line">        self.signature = KeyAPI().ecdsa_sign(</span><br><span class="line">            keccak(<span class="string">b&quot;&quot;</span>.join((self.packet_type, self.packet_data))), self.private_key</span><br><span class="line">        ).to_bytes()</span><br><span class="line">        self.<span class="built_in">hash</span> = keccak(<span class="string">b&quot;&quot;</span>.join((self.signature, self.packet_type, self.packet_data)))</span><br><span class="line">        self.packet_header = <span class="string">b&quot;&quot;</span>.join((self.<span class="built_in">hash</span>, self.signature, self.packet_type))</span><br><span class="line">        self.packet = <span class="string">b&quot;&quot;</span>.join((self.packet_header, self.packet_data))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_bytes</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&quot;&quot;</span>.join((self.packet_header, self.packet_data))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">unpack</span>(<span class="params">cls, packet</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(packet) &lt; <span class="number">98</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span>, <span class="string">&quot;packet长度不足&quot;</span></span><br><span class="line">        raw_hash = packet[:<span class="number">32</span>]</span><br><span class="line">        new_hash = keccak(packet[<span class="number">32</span>:])</span><br><span class="line">        <span class="keyword">if</span> raw_hash != new_hash:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span>, <span class="string">&quot;packet hash校验失败&quot;</span></span><br><span class="line">        packet_type = packet[<span class="number">97</span>]</span><br><span class="line">        <span class="keyword">if</span> packet_type == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span>, <span class="string">&quot;Ping Packet&quot;</span></span><br><span class="line">        <span class="keyword">elif</span> packet_type == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span>, <span class="string">&quot;Pong Packet&quot;</span></span><br><span class="line">        <span class="keyword">elif</span> packet_type == <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span>, <span class="string">&quot;FindNode Packet&quot;</span></span><br><span class="line">        <span class="keyword">elif</span> packet_type == <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span>, <span class="string">&quot;Neighbors Packet&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span>, <span class="string">&quot;类型无法解析&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PingPacket</span>(<span class="params">BasicPacket</span>):</span></span><br><span class="line">    packet_type = <span class="string">b&#x27;\x01&#x27;</span></span><br><span class="line">    sender_ip = <span class="literal">None</span></span><br><span class="line">    sender_port = <span class="literal">None</span></span><br><span class="line">    recipient_ip = <span class="literal">None</span></span><br><span class="line">    recipient_port = <span class="literal">None</span></span><br><span class="line">    version = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, sender_ip=<span class="string">&#x27;localhost&#x27;</span>, sender_port=<span class="number">30303</span>, recipient_ip=<span class="string">&#x27;localhost&#x27;</span>, recipient_port=<span class="number">30303</span></span>):</span></span><br><span class="line">        self.sender_ip = sender_ip</span><br><span class="line">        self.sender_port = sender_port</span><br><span class="line">        self.recipient_ip = recipient_ip</span><br><span class="line">        self.recipient_port = recipient_port</span><br><span class="line">        sender = [self.sender_ip, self.sender_port, <span class="number">0</span>]</span><br><span class="line">        recipient = [self.recipient_ip, self.recipient_port, <span class="number">0</span>]</span><br><span class="line">        before_packet_data = [self.version, sender, recipient, self.expiration]</span><br><span class="line">        self.packet_data = rlp.encode(before_packet_data)</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PongPacket</span>(<span class="params">BasicPacket</span>):</span></span><br><span class="line">    packet_type = <span class="string">b&#x27;\x02&#x27;</span></span><br><span class="line">    recipient_ip = <span class="literal">None</span></span><br><span class="line">    recipient_port = <span class="literal">None</span></span><br><span class="line">    ping_hash = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, ping_hash, recipient_ip=<span class="string">&#x27;localhost&#x27;</span>, recipient_port=<span class="number">30303</span></span>):</span></span><br><span class="line">        self.recipient_ip = recipient_ip</span><br><span class="line">        self.recipient_port = recipient_port</span><br><span class="line">        self.ping_hash = ping_hash</span><br><span class="line">        recipient = [self.recipient_ip, self.recipient_port, <span class="number">0</span>]</span><br><span class="line">        before_packet_data = [recipient, self.expiration]</span><br><span class="line">        self.packet_data = rlp.encode(before_packet_data)</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FindNodePacket</span>(<span class="params">BasicPacket</span>):</span></span><br><span class="line">    packet_type = <span class="string">b&#x27;\x03&#x27;</span></span><br><span class="line">    target = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, target</span>):</span></span><br><span class="line">        self.target = target</span><br><span class="line">        before_packet_data = [self.target, self.expiration]</span><br><span class="line">        self.packet_data = rlp.encode(before_packet_data)</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NeighborsPacket</span>(<span class="params">BasicPacket</span>):</span></span><br><span class="line">    packet_type = <span class="string">b&#x27;\x04&#x27;</span></span><br><span class="line">    nodes = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, nodes=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> nodes <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            nodes = []</span><br><span class="line">        before_packet_data = [self.nodes, self.expiration]</span><br><span class="line">        self.packet_data = rlp.encode(before_packet_data)</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="server-py"><a href="#server-py" class="headerlink" title="server.py"></a>server.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> packet <span class="keyword">import</span> PongPacket</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">&#x27;localhost&#x27;</span></span><br><span class="line">PORT = <span class="number">30303</span></span><br><span class="line">s = socket(AF_INET, SOCK_DGRAM)</span><br><span class="line">s.bind((HOST, PORT))</span><br><span class="line"></span><br><span class="line">data, address = s.recvfrom(<span class="number">1024</span>)</span><br><span class="line">ping_hash = data[:<span class="number">32</span>]</span><br><span class="line">pongPacket = PongPacket(ping_hash)</span><br><span class="line">s.sendto(pongPacket.to_bytes(), address)</span><br></pre></td></tr></table></figure><h2 id="client-py"><a href="#client-py" class="headerlink" title="client.py"></a>client.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> packet <span class="keyword">import</span> PingPacket, BasicPacket</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">&#x27;localhost&#x27;</span></span><br><span class="line">PORT = <span class="number">30303</span></span><br><span class="line">address = (HOST, PORT)</span><br><span class="line">s = socket(AF_INET, SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line">pingPacket = PingPacket()</span><br><span class="line">s.sendto(pingPacket.to_bytes(), address)</span><br><span class="line">data, _ = s.recvfrom(<span class="number">1024</span>)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line">success, message = BasicPacket.unpack(data)</span><br><span class="line"><span class="built_in">print</span>(success, message)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p><img src="https://i0.hdslb.com/bfs/album/2721b94cdf2fc8190c691fb7853bd177c953387b.png"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Node-Discovery-Protocol-v4&quot;&gt;&lt;a href=&quot;#Node-Discovery-Protocol-v4&quot; class=&quot;headerlink&quot; title=&quot;Node Discovery Protocol v4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/ethereum/devp2p/blob/master/discv4.md&quot;&gt;Node Discovery Protocol v4&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;本文包含了Ping Packet、Pong Packet、FindNode Packet、Neighbors Packet的生成及解析，以及Ping包和Pong包的互相发送。代码如下：&lt;/p&gt;</summary>
    
    
    
    <category term="区块链" scheme="http://miaoguoge.xyz/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
    <category term="devp2p" scheme="http://miaoguoge.xyz/tags/devp2p/"/>
    
  </entry>
  
  <entry>
    <title>解决CupertinoTabScaffold在安卓系统上返回键退出app的问题</title>
    <link href="http://miaoguoge.xyz/CupertinoTabScaffold-back/"/>
    <id>http://miaoguoge.xyz/CupertinoTabScaffold-back/</id>
    <published>2021-09-27T07:40:47.000Z</published>
    <updated>2021-09-27T07:58:02.728Z</updated>
    
    <content type="html"><![CDATA[<p>flutter有一套iOS风格的组件，其名为<code>Cupertino</code>，其中底部导航栏的组件为<code>CupertinoTabScaffold</code>，但由于iPhone&#x2F;iPad上没有系统级返回按键，该组件在开发时可能并没有测试过安卓上的返回按键，所以这造成了无论app当前处于哪个页面，只要按下安卓上的返回键，整个app都会退出的问题，下面是我的一些推测以及解决办法：</p><span id="more"></span><h3 id="1-原因推测（不一定准确）"><a href="#1-原因推测（不一定准确）" class="headerlink" title="1. 原因推测（不一定准确）"></a>1. 原因推测（不一定准确）</h3><p>底部导航栏中的每个tab都会默认生成一个独立的Navigator，但这些Navigator是“隐式”的，无法响应返回按钮，只有最外层主程序（注意不是首页&#x2F;第一个tab页面）的Navigator是显式的，所以无论在哪按返回键，调用的都是最外层主程序的Navigator的pop方法，所以app会直接退出。</p><h3 id="2-解决方法："><a href="#2-解决方法：" class="headerlink" title="2. 解决方法："></a>2. 解决方法：</h3><ol><li><p>将每个tab的Navigator显式的声明出来：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> foundationNavKey = GlobalKey&lt;NavigatorState&gt;();</span><br><span class="line"><span class="keyword">final</span> qrCodeNavKey = GlobalKey&lt;NavigatorState&gt;();</span><br><span class="line"><span class="keyword">final</span> myPageNavKey = GlobalKey&lt;NavigatorState&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> navKeys = [foundationNavKey, qrCodeNavKey, myPageNavKey];</span><br></pre></td></tr></table></figure></li><li><p>使用<code>tabController</code>获取当前在哪个tab中：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> tabController = CupertinoTabController(initialIndex: <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">CupertinoTabScaffold(</span><br><span class="line">    controller: tabController,</span><br><span class="line">    ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>拦截返回按键并实现功能：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">WillPopScope(</span><br><span class="line">    onWillPop: () <span class="keyword">async</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> !<span class="keyword">await</span> navKeys[tabController.index].currentState!.maybePop();</span><br><span class="line">    &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-完整代码如下："><a href="#3-完整代码如下：" class="headerlink" title="3. 完整代码如下："></a>3. 完整代码如下：</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YLXBApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> foundationNavKey = GlobalKey&lt;NavigatorState&gt;();</span><br><span class="line">  <span class="keyword">final</span> qrCodeNavKey = GlobalKey&lt;NavigatorState&gt;();</span><br><span class="line">  <span class="keyword">final</span> myPageNavKey = GlobalKey&lt;NavigatorState&gt;();</span><br><span class="line"></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">final</span> tabController = CupertinoTabController(initialIndex: <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">final</span> navKeys = [foundationNavKey, qrCodeNavKey, myPageNavKey];</span><br><span class="line">    <span class="keyword">final</span> pages = [Foundation(), QRCode(), MyPage()];</span><br><span class="line">    <span class="keyword">return</span> CupertinoApp(</span><br><span class="line">      home: WillPopScope(</span><br><span class="line">        onWillPop: () <span class="keyword">async</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> !<span class="keyword">await</span> navKeys[tabController.index].currentState!.maybePop();</span><br><span class="line">        &#125;,</span><br><span class="line">        child: CupertinoTabScaffold(</span><br><span class="line">          controller: tabController,</span><br><span class="line">          tabBar: CupertinoTabBar(</span><br><span class="line">            items: [</span><br><span class="line">              BottomNavigationBarItem(</span><br><span class="line">                icon: Icon(CupertinoIcons.building_2_fill),</span><br><span class="line">                label: <span class="string">&#x27;基金会&#x27;</span>,</span><br><span class="line">              ),</span><br><span class="line">              BottomNavigationBarItem(</span><br><span class="line">                icon: Icon(CupertinoIcons.qrcode),</span><br><span class="line">                label: <span class="string">&#x27;二维码&#x27;</span>,</span><br><span class="line">              ),</span><br><span class="line">              BottomNavigationBarItem(</span><br><span class="line">                icon: Icon(CupertinoIcons.person_circle),</span><br><span class="line">                label: <span class="string">&#x27;我的&#x27;</span>,</span><br><span class="line">              ),</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">          tabBuilder: (context, index) &#123;</span><br><span class="line">            <span class="keyword">return</span> CupertinoTabView(</span><br><span class="line">              navigatorKey: navKeys[index],</span><br><span class="line">              builder: (context) &#123; <span class="keyword">return</span> pages[index]; &#125;,</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      theme: CupertinoThemeData(</span><br><span class="line">        brightness: Brightness.light,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;flutter有一套iOS风格的组件，其名为&lt;code&gt;Cupertino&lt;/code&gt;，其中底部导航栏的组件为&lt;code&gt;CupertinoTabScaffold&lt;/code&gt;，但由于iPhone&amp;#x2F;iPad上没有系统级返回按键，该组件在开发时可能并没有测试过安卓上的返回按键，所以这造成了无论app当前处于哪个页面，只要按下安卓上的返回键，整个app都会退出的问题，下面是我的一些推测以及解决办法：&lt;/p&gt;</summary>
    
    
    
    <category term="开发" scheme="http://miaoguoge.xyz/categories/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="flutter" scheme="http://miaoguoge.xyz/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>flutter去除null safe library提示</title>
    <link href="http://miaoguoge.xyz/flutter-close-null-safe/"/>
    <id>http://miaoguoge.xyz/flutter-close-null-safe/</id>
    <published>2021-09-27T07:23:51.000Z</published>
    <updated>2021-09-27T07:35:54.095Z</updated>
    
    <content type="html"><![CDATA[<p>flutter不知从何时起就开始大力推行空安全，如果你的代码中引用了非空安全的库，默认情况下不仅启动不了，而且也没法build；启动还好说，在Android Studio的<code>Edit Configurations</code>中的<code>Additional run args</code>里填上非安全声明即可：</p><p><img src="https://i0.hdslb.com/bfs/album/80350ddf071902d6e2148ed7da59344d6a9ea204.png" alt="image-20210927151529056"></p><p>但是如果想build生成release包，就只能在命令行里自己输命令build了。</p><span id="more"></span><p>不仅上述功能会受到限制，IDE中语句也会被画警告线：</p><p><img src="https://i0.hdslb.com/bfs/album/cb159be59f421c4cd071f4cc3d06f87c49eae997.png" alt="image-20210927151216998"></p><p>作为强迫症的我自然是看不下去的，首先打开Android Studio的偏好设置，找到<code>Editor - Color Scheme - Dart</code>，首先将当前的配置文件拷贝一份：</p><p><img src="https://i0.hdslb.com/bfs/album/cc37e0906d23c3ed57ff8f5ec546ce2a5cd44325.png"></p><p>然后点击第二行的<code>Analysis hint</code>，再依次取消勾选右边的<code>Inherit values from:</code>和<code>Effects</code>：</p><p><img src="https://i0.hdslb.com/bfs/album/bbc08c8bf17a99e941eb10158b87c03f1edc3da6.png" alt="image-20210927152211125"></p><p>然后点击OK即可。</p><p>现在就不会再出现可恶的下划线啦：</p><p><img src="https://i0.hdslb.com/bfs/album/6d2f459d939d1086970061495ca60c9f8ee5da72.png" alt="image-20210927152316448"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;flutter不知从何时起就开始大力推行空安全，如果你的代码中引用了非空安全的库，默认情况下不仅启动不了，而且也没法build；启动还好说，在Android Studio的&lt;code&gt;Edit Configurations&lt;/code&gt;中的&lt;code&gt;Additional run args&lt;/code&gt;里填上非安全声明即可：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i0.hdslb.com/bfs/album/80350ddf071902d6e2148ed7da59344d6a9ea204.png&quot; alt=&quot;image-20210927151529056&quot;&gt;&lt;/p&gt;
&lt;p&gt;但是如果想build生成release包，就只能在命令行里自己输命令build了。&lt;/p&gt;</summary>
    
    
    
    <category term="开发" scheme="http://miaoguoge.xyz/categories/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="flutter" scheme="http://miaoguoge.xyz/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>flutter小问题汇总</title>
    <link href="http://miaoguoge.xyz/flutter-minor-problems/"/>
    <id>http://miaoguoge.xyz/flutter-minor-problems/</id>
    <published>2021-09-27T07:08:31.000Z</published>
    <updated>2022-03-05T12:57:31.049Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-iOS模拟器中图片不显示"><a href="#1-iOS模拟器中图片不显示" class="headerlink" title="1. iOS模拟器中图片不显示"></a>1. iOS模拟器中图片不显示</h2><p>首先确保<code>pubspec.yaml</code>中的<code>assets:</code>里正确填写了图片所在的目录，然后删除build目录重新启动app即可。</p><h2 id="持续更新中…"><a href="#持续更新中…" class="headerlink" title="持续更新中…."></a>持续更新中….</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-iOS模拟器中图片不显示&quot;&gt;&lt;a href=&quot;#1-iOS模拟器中图片不显示&quot; class=&quot;headerlink&quot; title=&quot;1. iOS模拟器中图片不显示&quot;&gt;&lt;/a&gt;1. iOS模拟器中图片不显示&lt;/h2&gt;&lt;p&gt;首先确保&lt;code&gt;pubspec.ya</summary>
      
    
    
    
    <category term="小问题汇总" scheme="http://miaoguoge.xyz/categories/%E5%B0%8F%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    
    
    <category term="flutter" scheme="http://miaoguoge.xyz/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>git小问题汇总</title>
    <link href="http://miaoguoge.xyz/git-minor-problems/"/>
    <id>http://miaoguoge.xyz/git-minor-problems/</id>
    <published>2021-09-27T06:58:01.000Z</published>
    <updated>2022-03-05T12:57:31.051Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-将已有仓库的https链接换为ssh链接"><a href="#1-将已有仓库的https链接换为ssh链接" class="headerlink" title="1. 将已有仓库的https链接换为ssh链接"></a>1. 将已有仓库的https链接换为ssh链接</h2><p>由于众所周知的原因，GitHub在国内的访问很不稳定，尤其是https对安全性的要求极高，这便会经常导致进行git操作时报SSL错误，而JB家的众多编译器在拉取GitHub仓库时默认用的都是https协议；将其改为SSH协议的链接会大大改善网络稳定性。</p><span id="more"></span><p>首先使用以下命令查看仓库的remote信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p>如果链接的开头是https，像下面这样：</p><p><img src="https://i0.hdslb.com/bfs/album/b0efd11667bfb19625bace359fdff88b30d59c1f.png" alt="image-20210927150151553"></p><p>那么使用以下命令可将其更改为ssh地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin ssh地址</span><br></pre></td></tr></table></figure><h2 id="持续更新中…"><a href="#持续更新中…" class="headerlink" title="持续更新中…."></a>持续更新中….</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-将已有仓库的https链接换为ssh链接&quot;&gt;&lt;a href=&quot;#1-将已有仓库的https链接换为ssh链接&quot; class=&quot;headerlink&quot; title=&quot;1. 将已有仓库的https链接换为ssh链接&quot;&gt;&lt;/a&gt;1. 将已有仓库的https链接换为ssh链接&lt;/h2&gt;&lt;p&gt;由于众所周知的原因，GitHub在国内的访问很不稳定，尤其是https对安全性的要求极高，这便会经常导致进行git操作时报SSL错误，而JB家的众多编译器在拉取GitHub仓库时默认用的都是https协议；将其改为SSH协议的链接会大大改善网络稳定性。&lt;/p&gt;</summary>
    
    
    
    <category term="小问题汇总" scheme="http://miaoguoge.xyz/categories/%E5%B0%8F%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    
    
    <category term="git" scheme="http://miaoguoge.xyz/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>flutter从外部调用setState()</title>
    <link href="http://miaoguoge.xyz/flutter-out-setstate/"/>
    <id>http://miaoguoge.xyz/flutter-out-setstate/</id>
    <published>2021-09-10T07:56:51.000Z</published>
    <updated>2021-09-27T07:35:32.648Z</updated>
    
    <content type="html"><![CDATA[<p>一般来说，flutter中<code>StatefulWidget</code>里的<code>setState()</code>方法只能在State类中调用，这篇文章介绍了如何从外部调用<code>setState()</code>方法。</p><span id="more"></span><p>需要调用<code>setState()</code>的场合多半是因为页面上的某些元素需要更新，比如用户在登陆后”我的“页面中需要显示用户名，但是登陆表单肯定不在”我的“页面中，甚至可能不是由”我的“页面打开的；那么我们就需要在登陆成功后主动通知”我的“页面去更新显示的用户名。</p><p>有人可能会说不是有生命周期函数吗，肯定有更优雅和自动化的实现方式，但有些情况下生命周期函数是不会按照官方文档中的被调用的，这个我们<a href="http://miaoguoge.xyz/flutter-update-page">下篇博客</a>中再详细说明。</p><ol><li><p>首先在<code>State</code>类中写一个函数，完成界面更新的任务，比如：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">updateUsername() &#123;</span><br><span class="line">    SharedPreferences.getInstance().then((prefs) &#123;</span><br><span class="line">      <span class="keyword">final</span> isLogin = (prefs.getBool(<span class="string">&#x27;isLogin&#x27;</span>) ?? <span class="keyword">false</span>);</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        <span class="keyword">if</span> (isLogin) &#123;</span><br><span class="line">          username = prefs.getString(<span class="string">&#x27;username&#x27;</span>)!;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          username = <span class="string">&quot;请登录&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>然后对<code>StatefulWidget</code>类进行改造，原先是这个样子：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> (&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _State createState() =&gt; _State();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们要把它改造成这个样子：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInfo</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> _MyInfoState _myInfoState = _MyInfoState();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _MyInfoState createState() =&gt; __myInfoState;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> updateUsername() &#123;</span><br><span class="line">    _myInfoState.updateUsername();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，我们删除了无用的super，将原先匿名的<code>_State</code>类改为了私有变量，并且定义了一个<code>static</code>的方法，这个方法的唯一作用就是去调用<code>_State</code>类那个实例中的同名方法。</p></li><li><p>这样之后，从外部就可以调用<code>MyInfo.updateUsername()</code>以完成界面更新了。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;一般来说，flutter中&lt;code&gt;StatefulWidget&lt;/code&gt;里的&lt;code&gt;setState()&lt;/code&gt;方法只能在State类中调用，这篇文章介绍了如何从外部调用&lt;code&gt;setState()&lt;/code&gt;方法。&lt;/p&gt;</summary>
    
    
    
    <category term="开发" scheme="http://miaoguoge.xyz/categories/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="flutter" scheme="http://miaoguoge.xyz/tags/flutter/"/>
    
  </entry>
  
</feed>
